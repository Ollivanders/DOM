// Override key bindings by placing them into your key bindings file.
[
    { "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                         "when": "inZenMode" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTestPeek",
                                         "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
    { "key": "shift+escape",          "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "escape",                "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "cmd+down",              "command": "cursorBottom",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+down",        "command": "cursorBottomSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+down",    "command": "cursorColumnSelectDown",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+left",    "command": "cursorColumnSelectLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+pagedown", "command": "cursorColumnSelectPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+pageup",  "command": "cursorColumnSelectPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+right",   "command": "cursorColumnSelectRight",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+up",      "command": "cursorColumnSelectUp",
                                         "when": "textInputFocus" },
    { "key": "ctrl+n",                "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "shift+down",            "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+right",             "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "end",                   "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+cmd+right",       "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+end",             "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "cmd+left",              "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "home",                  "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+left",        "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+home",            "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+b",                "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "left",                  "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+left",            "command": "cursorLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+e",                "command": "cursorLineEnd",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+e",          "command": "cursorLineEndSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+a",                "command": "cursorLineStart",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+a",          "command": "cursorLineStartSelect",
                                         "when": "textInputFocus" },
    { "key": "pagedown",              "command": "cursorPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                         "when": "textInputFocus" },
    { "key": "pageup",                "command": "cursorPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+f",                "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "right",                 "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "shift+right",           "command": "cursorRightSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+up",                "command": "cursorTop",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+up",          "command": "cursorTopSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+p",                "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "up",                    "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "shift+up",              "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+backspace",        "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+h",                "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+backspace",       "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "backspace",             "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+delete",           "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+d",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "delete",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "cmd+a",                 "command": "editor.action.selectAll" },
    { "key": "cmd+c",                 "command": "execCopy" },
    { "key": "cmd+x",                 "command": "execCut" },
    { "key": "cmd+v",                 "command": "execPaste" },
    { "key": "cmd+l",                 "command": "expandLineSelection",
                                         "when": "textInputFocus" },
    { "key": "ctrl+o",                "command": "lineBreakInsert",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "shift+tab",             "command": "outdent",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "shift+cmd+z",           "command": "redo" },
    { "key": "ctrl+pagedown",         "command": "scrollLineDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+pageup",           "command": "scrollLineUp",
                                         "when": "textInputFocus" },
    { "key": "cmd+pagedown",          "command": "scrollPageDown",
                                         "when": "textInputFocus" },
    { "key": "cmd+pageup",            "command": "scrollPageUp",
                                         "when": "textInputFocus" },
    { "key": "tab",                   "command": "tab",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "cmd+z",                 "command": "undo" },
    { "key": "shift+down",            "command": "cursorColumnSelectDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+right",           "command": "cursorColumnSelectRight",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+up",              "command": "cursorColumnSelectUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+escape",          "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "escape",                "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "f12",                   "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "f4",                    "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f12",             "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f4",              "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+enter",           "command": "refactorPreview.apply",
                                         "when": "refactorPreview.enabled && refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
    { "key": "alt+enter",             "command": "testing.editFocusedTest",
                                         "when": "focusedView == 'workbench.view.testing'" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
    { "key": "cmd+f",                 "command": "actions.find",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "cmd+e",                 "command": "actions.findWithSelection" },
    { "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                         "when": "breakpointWidgetVisible && inBreakpointWidget" },
    { "key": "shift+escape",          "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "cmd+u",                 "command": "cursorUndo",
                                         "when": "textInputFocus" },
    { "key": "alt+right",             "command": "cursorWordEndRight",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+right",       "command": "cursorWordEndRightSelect",
                                         "when": "textInputFocus" },
    { "key": "alt+left",              "command": "cursorWordLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+left",        "command": "cursorWordLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+alt+left",         "command": "cursorWordPartLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+left",   "command": "cursorWordPartLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+alt+right",        "command": "cursorWordPartRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+right",  "command": "cursorWordPartRightSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+backspace",         "command": "deleteAllLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "cmd+delete",            "command": "deleteAllRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+k",                "command": "deleteAllRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+backspace",         "command": "deleteWordLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+alt+backspace",    "command": "deleteWordPartLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+alt+delete",       "command": "deleteWordPartRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+delete",            "command": "deleteWordRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "cmd+k cmd+c",           "command": "editor.action.addCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+.",             "command": "editor.action.autoFix",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "cmd+f2",                "command": "editor.action.changeAll",
                                         "when": "editorTextFocus && editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction" },
    { "key": "cmd+x",                 "command": "editor.action.clipboardCutAction" },
    { "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction" },
    { "key": "cmd+/",                 "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+k cmd+k",           "command": "editor.action.defineKeybinding",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'" },
    { "key": "shift+cmd+k",           "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "f7",                    "command": "editor.action.diffReview.next",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f7",              "command": "editor.action.diffReview.prev",
                                         "when": "isInDiffEditor" },
    { "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus" },
    { "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "cmd+f",                 "command": "editor.action.extensioneditor.showfind",
                                         "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                         "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
    { "key": "cmd+k cmd+f",           "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+f12",               "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+f12",             "command": "editor.action.goToReferences",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+cmd+.",           "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+,",           "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+]",                 "command": "editor.action.indentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+cmd+up",            "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+down",          "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "cmd+enter",             "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+enter",       "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+j",                "command": "editor.action.joinLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+\\",          "command": "editor.action.jumpToBracket",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+f2",          "command": "editor.action.linkedEditing",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f8",                "command": "editor.action.marker.next",
                                         "when": "editorFocus" },
    { "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                         "when": "editorFocus" },
    { "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                         "when": "editorFocus" },
    { "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                         "when": "editorFocus" },
    { "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+k cmd+d",           "command": "editor.action.moveSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "cmd+f3",                "command": "editor.action.nextSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
    { "key": "cmd+[",                 "command": "editor.action.outdentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+cmd+f12",         "command": "editor.action.peekImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "shift+cmd+f3",          "command": "editor.action.previousSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+.",                 "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+k cmd+u",           "command": "editor.action.removeCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "f2",                    "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f12",                   "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "cmd+k f12",             "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "cmd+k cmd+k",           "command": "editor.action.selectFromAnchorToCursor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "shift+cmd+l",           "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "cmd+k cmd+b",           "command": "editor.action.setSelectionAnchor",
                                         "when": "editorTextFocus" },
    { "key": "alt+f1",                "command": "editor.action.showAccessibilityHelp" },
    { "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                         "when": "textInputFocus" },
    { "key": "cmd+k cmd+i",           "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+right",      "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+cmd+right",  "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+left",       "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+cmd+left",   "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "ctrl+shift+m",          "command": "editor.action.toggleTabFocusMode" },
    { "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
    { "key": "ctrl+t",                "command": "editor.action.transposeLetters",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "shift+cmd+space",       "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "cmd+i",                 "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "alt+escape",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "cmd+k cmd+x",           "command": "editor.action.trimTrailingWhitespace",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                         "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "cmd+f",                 "command": "editor.action.webvieweditor.showFind",
                                         "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "escape",                "command": "editor.cancelOperation",
                                         "when": "cancellableOperation" },
    { "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                         "when": "exceptionWidgetVisible" },
    { "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && editorTextFocus" },
    { "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                         "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "alt+cmd+[",             "command": "editor.fold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+0",           "command": "editor.foldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+/",           "command": "editor.foldAllBlockComments",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+-",           "command": "editor.foldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+8",           "command": "editor.foldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+6",           "command": "editor.foldLevel6",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+7",           "command": "editor.foldLevel7",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+[",           "command": "editor.foldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                         "when": "hasSymbols" },
    { "key": "cmd+k cmd+l",           "command": "editor.toggleFold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "alt+cmd+]",             "command": "editor.unfold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+j",           "command": "editor.unfoldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+=",           "command": "editor.unfoldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+9",           "command": "editor.unfoldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+]",           "command": "editor.unfoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "gettingStarted.goBack",
                                         "when": "inGettingStarted && activeEditor == 'gettingStartedPage'" },
    { "key": "right",                 "command": "gettingStarted.next",
                                         "when": "inGettingStarted && activeEditor == 'gettingStartedPage'" },
    { "key": "down",                  "command": "gettingStarted.next",
                                         "when": "inGettingStarted && activeEditor == 'gettingStartedPage'" },
    { "key": "left",                  "command": "gettingStarted.prev",
                                         "when": "inGettingStarted && activeEditor == 'gettingStartedPage'" },
    { "key": "up",                    "command": "gettingStarted.prev",
                                         "when": "inGettingStarted && activeEditor == 'gettingStartedPage'" },
    { "key": "tab",                   "command": "insertSnippet",
                                         "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
    { "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                         "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0" },
    { "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markdown' || notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0" },
    { "key": "shift+cmd+v",           "command": "notebook.cell.pasteAbove",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "shift+alt+f",           "command": "notebook.formatCell",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+enter",            "command": "openReferenceToSide",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus" },
    { "key": "enter",                 "command": "repl.action.acceptInput",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "cmd+f",                 "command": "repl.action.filter",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "shift+cmd+r",           "command": "rerunSearchEditorSearch",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                         "when": "inSearchEditor" },
    { "key": "shift+cmd+backspace",   "command": "search.searchEditor.action.deleteFileResults",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.clearSearchResults",
                                         "when": "inSettingsEditor && inSettingsSearch" },
    { "key": "cmd+.",                 "command": "settings.action.editFocusedSetting",
                                         "when": "inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusNextSetting",
                                         "when": "inSettingsSearch" },
    { "key": "shift+enter",           "command": "settings.action.focusPreviousSetting",
                                         "when": "inSettingsSearch" },
    { "key": "down",                  "command": "settings.action.focusSettingsFile",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "cmd+f",                 "command": "settings.action.search",
                                         "when": "inSettingsEditor" },
    { "key": "cmd+/",                 "command": "toggleExplainMode",
                                         "when": "suggestWidgetVisible" },
    { "key": "cmd+k f2",              "command": "togglePeekWidgetFocus",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                         "when": "editorTextFocus" },
    { "key": "shift+escape",          "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "escape",                "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "cmd+enter",             "command": "workbench.action.submitComment",
                                         "when": "commentEditorFocused" },
    { "key": "shift+escape",          "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "escape",                "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "alt+cmd+enter",         "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "cmd+enter",             "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "shift+cmd+1",           "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "enter",                 "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "alt+cmd+c",             "command": "toggleFindCaseSensitive",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+l",             "command": "toggleFindInSelection",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+r",             "command": "toggleFindRegex",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+w",             "command": "toggleFindWholeWord",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+p",             "command": "togglePreserveCase",
                                         "when": "editorFocus" },
    { "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                         "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
    { "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                         "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
    { "key": "escape",                "command": "leaveEditorMessage",
                                         "when": "messageVisible" },
    { "key": "shift+escape",          "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "escape",                "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "shift+escape",          "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "escape",                "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "shift+escape",          "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationToastsVisible" },
    { "key": "shift+escape",          "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "escape",                "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "ctrl+n",                "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+down",              "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "down",                  "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "ctrl+p",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+up",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "up",                    "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && textInputFocus" },
    { "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && textInputFocus" },
    { "key": "tab",                   "command": "acceptSelectedSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptSelectedSuggestion",
                                         "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
    { "key": "shift+escape",          "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "insertBestCompletion",
                                         "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "tab",                   "command": "insertNextSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "shift+tab",             "command": "insertPrevSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "cmd+pagedown",          "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pagedown",              "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+n",                "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+down",              "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "down",                  "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+pageup",            "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pageup",                "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+p",                "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+up",                "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "up",                    "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "shift+enter",           "command": "acceptRenameInputWithPreview",
                                         "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible" },
    { "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "escape",                "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "shift+escape",          "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "escape",                "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "shift+cmd+l",           "command": "addCursorsAtSearchResults",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "shift+cmd+;",           "command": "breadcrumbs.focus",
                                         "when": "breadcrumbsPossible" },
    { "key": "shift+cmd+.",           "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible" },
    { "key": "alt+right",             "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "right",                 "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "alt+left",              "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+enter",             "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "space",                 "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+enter",             "command": "breadcrumbs.revealFocusedFromTreeAside",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "down",                  "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "shift+cmd+.",           "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "shift+escape",          "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeReplaceInFilesWidget",
                                         "when": "replaceInputBoxFocus && searchViewletVisible" },
    { "key": "alt+cmd+c",             "command": "copyFilePath",
                                         "when": "!editorFocus" },
    { "key": "shift+alt+cmd+c",       "command": "copyRelativeFilePath",
                                         "when": "!editorFocus" },
    { "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "cmd+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "cmd+backspace",         "command": "debug.removeBreakpoint",
                                         "when": "breakpointsFocused && !breakpointInputFocused" },
    { "key": "cmd+backspace",         "command": "debug.removeWatchExpression",
                                         "when": "watchExpressionsFocused && !expressionSelected" },
    { "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                         "when": "editorTextFocus" },
    { "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                         "when": "callHierarchyVisible" },
    { "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
    { "key": "ctrl+enter",            "command": "explorer.openToSide",
                                         "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus" },
    { "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                         "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "alt+down",              "command": "history.showNext",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "down",                  "command": "history.showNext",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "alt+up",                "command": "history.showPrevious",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "up",                    "command": "history.showPrevious",
                                         "when": "historyNavigationEnabled && historyNavigationWidget" },
    { "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "cmd+k cmd+a",           "command": "keybindings.editor.addKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "cmd+c",                 "command": "keybindings.editor.copyKeybindingEntry",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "cmd+k cmd+e",           "command": "keybindings.editor.defineWhenExpression",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "cmd+down",              "command": "keybindings.editor.focusKeybindings",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "alt+cmd+k",             "command": "keybindings.editor.recordSearchKeys",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "cmd+backspace",         "command": "keybindings.editor.removeKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "cmd+f",                 "command": "keybindings.editor.searchKeybindings",
                                         "when": "inKeybindings" },
    { "key": "alt+cmd+p",             "command": "keybindings.editor.toggleSortByPrecedence",
                                         "when": "inKeybindings" },
    { "key": "escape",                "command": "list.clear",
                                         "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
    { "key": "cmd+up",                "command": "list.collapse",
                                         "when": "listFocus && !inputFocus" },
    { "key": "left",                  "command": "list.collapse",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+cmd+up",          "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+left",              "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "right",                 "command": "list.expand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+down",            "command": "list.expandSelectionDown",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "shift+up",              "command": "list.expandSelectionUp",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "ctrl+n",                "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "down",                  "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "home",                  "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus" },
    { "key": "end",                   "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pagedown",              "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pageup",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+p",                "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "up",                    "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+down",              "command": "list.scrollDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+up",                "command": "list.scrollUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+down",              "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+a",                 "command": "list.selectAll",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "space",                 "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+cmd+enter",       "command": "list.toggleSelection",
                                         "when": "listFocus && !inputFocus" },
    { "key": "y",                     "command": "notebook.cell.changeToCode",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markdown'" },
    { "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
    { "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                         "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "cmd+k cmd+c",           "command": "notebook.cell.collapseCellInput",
                                         "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
    { "key": "cmd+k t",               "command": "notebook.cell.collapseCellOutput",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
    { "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "cmd+backspace",         "command": "notebook.cell.delete",
                                         "when": "notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "enter",                 "command": "notebook.cell.edit",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "cmd+k cmd+c",           "command": "notebook.cell.expandCellInput",
                                         "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
    { "key": "cmd+k t",               "command": "notebook.cell.expandCellOutput",
                                         "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
    { "key": "ctrl+cmd+down",         "command": "notebook.cell.focusInOutput",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused" },
    { "key": "ctrl+cmd+up",           "command": "notebook.cell.focusOutOutput",
                                         "when": "notebookEditorFocused" },
    { "key": "shift+cmd+enter",       "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "cmd+enter",             "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+shift+alt+j",      "command": "notebook.cell.joinAbove",
                                         "when": "notebookEditorFocused" },
    { "key": "ctrl+alt+j",            "command": "notebook.cell.joinBelow",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+down",              "command": "notebook.cell.moveDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "alt+up",                "command": "notebook.cell.moveUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "cmd+k shift+cmd+\\",    "command": "notebook.cell.split",
                                         "when": "notebookCellEditable && notebookEditable && notebookEditorFocused" },
    { "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                         "when": "notebookEditorFocused" },
    { "key": "cmd+f",                 "command": "notebook.find",
                                         "when": "notebookEditorFocused || !editorFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "cmd+down",              "command": "notebook.focusBottom",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+cmd+down",         "command": "notebook.focusNextEditor",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "cmd+up",                "command": "notebook.focusTop",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "left",                  "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "alt+cmd+[",             "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "shift+alt+f",           "command": "notebook.format",
                                         "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "escape",                "command": "notebook.hideFind",
                                         "when": "notebookEditorFocused && notebookFindWidgetFocused" },
    { "key": "right",                 "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "alt+cmd+]",             "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "cmd+backspace",         "command": "notification.clear",
                                         "when": "notificationFocus" },
    { "key": "left",                  "command": "notification.collapse",
                                         "when": "notificationFocus" },
    { "key": "right",                 "command": "notification.expand",
                                         "when": "notificationFocus" },
    { "key": "enter",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "space",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "home",                  "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pageup",                "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "end",                   "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pagedown",              "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "down",                  "command": "notifications.focusNextToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "up",                    "command": "notifications.focusPreviousToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "cmd+c",                 "command": "problems.action.copy",
                                         "when": "problemFocus" },
    { "key": "cmd+f",                 "command": "problems.action.focusFilter",
                                         "when": "focusedView == 'workbench.panel.markers.view'" },
    { "key": "cmd+down",              "command": "problems.action.focusProblemsFromFilter",
                                         "when": "problemsFilterFocus" },
    { "key": "cmd+down",              "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "enter",                 "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                         "when": "problemFocus" },
    { "key": "cmd+.",                 "command": "problems.action.showQuickFixes",
                                         "when": "problemFocus" },
    { "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                         "when": "listFocus && refactorPreview.enabled && !inputFocus" },
    { "key": "alt+cmd+r",             "command": "revealFileInOS",
                                         "when": "!editorFocus" },
    { "key": "cmd+down",              "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus" },
    { "key": "enter",                 "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus" },
    { "key": "alt+cmd+s",             "command": "saveAll" },
    { "key": "cmd+enter",             "command": "scm.acceptInput",
                                         "when": "scmRepository" },
    { "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                         "when": "scmRepository" },
    { "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                         "when": "scmRepository" },
    { "key": "down",                  "command": "scm.viewNextCommit",
                                         "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "up",                    "command": "scm.viewPreviousCommit",
                                         "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "escape",                "command": "search.action.cancel",
                                         "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'" },
    { "key": "cmd+c",                 "command": "search.action.copyMatch",
                                         "when": "fileMatchOrMatchFocus" },
    { "key": "alt+cmd+c",             "command": "search.action.copyPath",
                                         "when": "fileMatchOrFolderMatchWithResourceFocus" },
    { "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "cmd+up",                "command": "search.action.focusSearchFromResults",
                                         "when": "firstMatchFocus && searchViewletVisible" },
    { "key": "cmd+enter",             "command": "search.action.openInEditor",
                                         "when": "hasSearchResult && searchViewletFocus" },
    { "key": "cmd+down",              "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "enter",                 "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "cmd+backspace",         "command": "search.action.remove",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replace",
                                         "when": "matchFocus && replaceActive && searchViewletVisible" },
    { "key": "alt+cmd+enter",         "command": "search.action.replaceAll",
                                         "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
    { "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "cmd+down",              "command": "search.focus.nextInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
    { "key": "cmd+up",                "command": "search.focus.previousInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
    { "key": "shift+cmd+l",           "command": "selectAllSearchEditorMatches",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.focusLevelUp",
                                         "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusSettingControl",
                                         "when": "settingRowFocus" },
    { "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "enter",                 "command": "settings.action.focusSettingsList",
                                         "when": "inSettingsEditor && settingsTocRowFocus" },
    { "key": "left",                  "command": "settings.action.focusTOC",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                         "when": "inSettingsEditor" },
    { "key": "alt+cmd+c",             "command": "toggleSearchCaseSensitive",
                                         "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
    { "key": "alt+cmd+c",             "command": "toggleSearchEditorCaseSensitive",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+l",             "command": "toggleSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+cmd+r",             "command": "toggleSearchEditorRegex",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+w",             "command": "toggleSearchEditorWholeWord",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+p",             "command": "toggleSearchPreserveCase",
                                         "when": "searchViewletFocus" },
    { "key": "alt+cmd+r",             "command": "toggleSearchRegex",
                                         "when": "searchViewletFocus" },
    { "key": "alt+cmd+w",             "command": "toggleSearchWholeWord",
                                         "when": "searchViewletFocus" },
    { "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
    { "key": "cmd+k cmd+w",           "command": "workbench.action.closeAllEditors" },
    { "key": "cmd+k shift+cmd+w",     "command": "workbench.action.closeAllGroups" },
    { "key": "cmd+k w",               "command": "workbench.action.closeEditorsInGroup" },
    { "key": "cmd+k f",               "command": "workbench.action.closeFolder",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "cmd+w",                 "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "alt+cmd+t",             "command": "workbench.action.closeOtherEditors" },
    { "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "cmd+k u",               "command": "workbench.action.closeUnmodifiedEditors" },
    { "key": "shift+cmd+w",           "command": "workbench.action.closeWindow" },
    { "key": "cmd+w",                 "command": "workbench.action.closeWindow",
                                         "when": "!editorIsOpen && !multipleEditorGroups" },
    { "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                         "when": "focusedSessionIsAttach && inDebugMode" },
    { "key": "shift+cmd+f5",          "command": "workbench.action.debug.restart",
                                         "when": "inDebugMode" },
    { "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                         "when": "debuggersAvailable && debugState != 'initializing'" },
    { "key": "f5",                    "command": "workbench.action.debug.start",
                                         "when": "debuggersAvailable && debugState != 'initializing'" },
    { "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                         "when": "debugState == 'stopped'" },
    { "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                         "when": "debugState == 'stopped'" },
    { "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode && !focusedSessionIsAttach" },
    { "key": "cmd+k m",               "command": "workbench.action.editor.changeLanguageMode",
                                         "when": "!notebookEditorFocused" },
    { "key": "cmd+k p",               "command": "workbench.action.files.copyPathOfActiveFile" },
    { "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openFileFolder" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openLocalFileFolder",
                                         "when": "remoteFileDialogVisible" },
    { "key": "cmd+k r",               "command": "workbench.action.files.revealActiveFileInWindows" },
    { "key": "cmd+s",                 "command": "workbench.action.files.save" },
    { "key": "shift+cmd+s",           "command": "workbench.action.files.saveAs" },
    { "key": "shift+cmd+s",           "command": "workbench.action.files.saveLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "cmd+k s",               "command": "workbench.action.files.saveWithoutFormatting" },
    { "key": "cmd+k o",               "command": "workbench.action.files.showOpenedFileInNewWindow",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "cmd+k cmd+up",          "command": "workbench.action.focusAboveGroup" },
    { "key": "cmd+k cmd+down",        "command": "workbench.action.focusBelowGroup" },
    { "key": "cmd+8",                 "command": "workbench.action.focusEighthEditorGroup" },
    { "key": "cmd+5",                 "command": "workbench.action.focusFifthEditorGroup" },
    { "key": "cmd+1",                 "command": "workbench.action.focusFirstEditorGroup" },
    { "key": "cmd+4",                 "command": "workbench.action.focusFourthEditorGroup" },
    { "key": "cmd+k cmd+left",        "command": "workbench.action.focusLeftGroup" },
    { "key": "f6",                    "command": "workbench.action.focusNextPart" },
    { "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
    { "key": "cmd+k cmd+right",       "command": "workbench.action.focusRightGroup" },
    { "key": "cmd+2",                 "command": "workbench.action.focusSecondEditorGroup" },
    { "key": "cmd+7",                 "command": "workbench.action.focusSeventhEditorGroup" },
    { "key": "cmd+0",                 "command": "workbench.action.focusSideBar" },
    { "key": "cmd+6",                 "command": "workbench.action.focusSixthEditorGroup" },
    { "key": "cmd+3",                 "command": "workbench.action.focusThirdEditorGroup" },
    { "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
    { "key": "shift+cmd+o",           "command": "workbench.action.gotoSymbol" },
    { "key": "escape",                "command": "workbench.action.hideInterfaceOverview",
                                         "when": "interfaceOverviewVisible" },
    { "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "cmd+k enter",           "command": "workbench.action.keepEditor" },
    { "key": "cmd+k cmd+r",           "command": "workbench.action.keybindingsReference" },
    { "key": "cmd+9",                 "command": "workbench.action.lastEditorInGroup" },
    { "key": "ctrl+0",                "command": "workbench.action.lastEditorInGroup" },
    { "key": "cmd+k down",            "command": "workbench.action.moveActiveEditorGroupDown" },
    { "key": "cmd+k left",            "command": "workbench.action.moveActiveEditorGroupLeft" },
    { "key": "cmd+k right",           "command": "workbench.action.moveActiveEditorGroupRight" },
    { "key": "cmd+k up",              "command": "workbench.action.moveActiveEditorGroupUp" },
    { "key": "cmd+k shift+cmd+left",  "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "cmd+k shift+cmd+right", "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "ctrl+cmd+1",            "command": "workbench.action.moveEditorToFirstGroup" },
    { "key": "ctrl+cmd+9",            "command": "workbench.action.moveEditorToLastGroup" },
    { "key": "ctrl+cmd+right",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "ctrl+cmd+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "ctrl+-",                "command": "workbench.action.navigateBack" },
    { "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward" },
    { "key": "cmd+k cmd+q",           "command": "workbench.action.navigateToLastEditLocation" },
    { "key": "shift+cmd+n",           "command": "workbench.action.newWindow" },
    { "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
    { "key": "alt+cmd+right",         "command": "workbench.action.nextEditor" },
    { "key": "cmd+k alt+cmd+right",   "command": "workbench.action.nextEditorInGroup" },
    { "key": "ctrl+1",                "command": "workbench.action.openEditorAtIndex1" },
    { "key": "ctrl+2",                "command": "workbench.action.openEditorAtIndex2" },
    { "key": "ctrl+3",                "command": "workbench.action.openEditorAtIndex3" },
    { "key": "ctrl+4",                "command": "workbench.action.openEditorAtIndex4" },
    { "key": "ctrl+5",                "command": "workbench.action.openEditorAtIndex5" },
    { "key": "ctrl+6",                "command": "workbench.action.openEditorAtIndex6" },
    { "key": "ctrl+7",                "command": "workbench.action.openEditorAtIndex7" },
    { "key": "ctrl+8",                "command": "workbench.action.openEditorAtIndex8" },
    { "key": "ctrl+9",                "command": "workbench.action.openEditorAtIndex9" },
    { "key": "cmd+k cmd+s",           "command": "workbench.action.openGlobalKeybindings" },
    { "key": "ctrl+r",                "command": "workbench.action.openRecent" },
    { "key": "cmd+,",                 "command": "workbench.action.openSettings" },
    { "key": "shift+cmd+u",           "command": "workbench.action.output.toggleOutput",
                                         "when": "workbench.panel.output.active" },
    { "key": "cmd+k shift+enter",     "command": "workbench.action.pinEditor",
                                         "when": "!activeEditorIsPinned" },
    { "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
    { "key": "alt+cmd+left",          "command": "workbench.action.previousEditor" },
    { "key": "cmd+k alt+cmd+left",    "command": "workbench.action.previousEditorInGroup" },
    { "key": "cmd+p",                 "command": "workbench.action.quickOpen" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
    { "key": "cmd+q",                 "command": "workbench.action.quit" },
    { "key": "shift+cmd+t",           "command": "workbench.action.reopenClosedEditor" },
    { "key": "shift+cmd+h",           "command": "workbench.action.replaceInFiles" },
    { "key": "shift+cmd+j",           "command": "workbench.action.search.toggleQueryDetails",
                                         "when": "inSearchEditor || searchViewletFocus" },
    { "key": "cmd+k cmd+t",           "command": "workbench.action.selectTheme" },
    { "key": "alt+cmd+tab",           "command": "workbench.action.showAllEditors" },
    { "key": "cmd+t",                 "command": "workbench.action.showAllSymbols" },
    { "key": "f1",                    "command": "workbench.action.showCommands" },
    { "key": "shift+cmd+p",           "command": "workbench.action.showCommands" },
    { "key": "cmd+\\",                "command": "workbench.action.splitEditor" },
    { "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorOrthogonal" },
    { "key": "ctrl+w",                "command": "workbench.action.switchWindow" },
    { "key": "shift+cmd+b",           "command": "workbench.action.tasks.build" },
    { "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
    { "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && terminalTextSelected" },
    { "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "cmd+g",                 "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalProcessSupported" },
    { "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+g",           "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalProcessSupported" },
    { "key": "cmd+f",                 "command": "workbench.action.terminal.focusFind",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+]",           "command": "workbench.action.terminal.focusNext",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+down",          "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+right",         "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+[",           "command": "workbench.action.terminal.focusPrevious",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+up",            "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+left",          "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+\\",          "command": "workbench.action.terminal.focusTabs",
                                         "when": "terminalFocus && terminalProcessSupported || terminalProcessSupported && terminalTabsFocus" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "delete",                "command": "workbench.action.terminal.killInstance",
                                         "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "cmd+backspace",         "command": "workbench.action.terminal.killInstance",
                                         "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "escape",                "command": "workbench.action.terminal.navigationModeExit",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported" },
    { "key": "cmd+down",              "command": "workbench.action.terminal.navigationModeFocusNext",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "cmd+up",                "command": "workbench.action.terminal.navigationModeFocusPrevious",
                                         "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new",
                                         "when": "terminalProcessSupported" },
    { "key": "ctrl+shift+[Backslash]", "command": "workbench.action.terminal.new",
                                         "when": "terminalProcessSupported" },
    { "key": "shift+cmd+c",           "command": "workbench.action.terminal.openNativeConsole",
                                         "when": "!terminalFocus" },
    { "key": "cmd+v",                 "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.renameInstance",
                                         "when": "terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
    { "key": "ctrl+cmd+down",         "command": "workbench.action.terminal.resizePaneDown",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+left",         "command": "workbench.action.terminal.resizePaneLeft",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+right",        "command": "workbench.action.terminal.resizePaneRight",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+up",           "command": "workbench.action.terminal.resizePaneUp",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+pagedown",      "command": "workbench.action.terminal.scrollDown",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "pagedown",              "command": "workbench.action.terminal.scrollDownPage",
                                         "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottom",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "cmd+down",              "command": "workbench.action.terminal.scrollToNextCommand",
                                         "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "cmd+up",                "command": "workbench.action.terminal.scrollToPreviousCommand",
                                         "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTop",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+pageup",        "command": "workbench.action.terminal.scrollUp",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "pageup",                "command": "workbench.action.terminal.scrollUpPage",
                                         "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "cmd+a",                 "command": "workbench.action.terminal.selectAll",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+down",        "command": "workbench.action.terminal.selectToNextCommand",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+up",          "command": "workbench.action.terminal.selectToPreviousCommand",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "alt+backspace",         "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0017"} },
    { "key": "alt+delete",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001bd"} },
    { "key": "cmd+backspace",         "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0015"} },
    { "key": "cmd+left",              "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0001"} },
    { "key": "cmd+right",             "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0005"} },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "cmd+\\",                "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitInstance",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "cmd+\\",                "command": "workbench.action.terminal.splitInstance",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "alt+cmd+c",             "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+r",             "command": "workbench.action.terminal.toggleFindRegex",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+w",             "command": "workbench.action.terminal.toggleFindWholeWord",
                                         "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active" },
    { "key": "alt+cmd+0",             "command": "workbench.action.toggleEditorGroupLayout" },
    { "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen" },
    { "key": "cmd+j",                 "command": "workbench.action.togglePanel" },
    { "key": "cmd+b",                 "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "ctrl+cmd+w",            "command": "workbench.action.toggleTabsVisibility" },
    { "key": "cmd+k z",               "command": "workbench.action.toggleZenMode" },
    { "key": "cmd+k shift+enter",     "command": "workbench.action.unpinEditor",
                                         "when": "activeEditorIsPinned" },
    { "key": "cmd+numpad_add",        "command": "workbench.action.zoomIn" },
    { "key": "shift+cmd+=",           "command": "workbench.action.zoomIn" },
    { "key": "cmd+=",                 "command": "workbench.action.zoomIn" },
    { "key": "cmd+numpad_subtract",   "command": "workbench.action.zoomOut" },
    { "key": "shift+cmd+-",           "command": "workbench.action.zoomOut" },
    { "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
    { "key": "cmd+numpad0",           "command": "workbench.action.zoomReset" },
    { "key": "shift+cmd+m",           "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "shift+cmd+y",           "command": "workbench.debug.action.toggleRepl",
                                         "when": "workbench.panel.repl.view.active" },
    { "key": "cmd+k cmd+m",           "command": "workbench.extensions.action.showRecommendedKeymapExtensions" },
    { "key": "cmd+k c",               "command": "workbench.files.action.compareWithClipboard" },
    { "key": "cmd+k d",               "command": "workbench.files.action.compareWithSaved" },
    { "key": "cmd+k e",               "command": "workbench.files.action.focusOpenEditorsView",
                                         "when": "workbench.explorer.openEditorsView.active" },
    { "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                         "when": "statusBarFocused" },
    { "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                         "when": "statusBarFocused" },
    { "key": "end",                   "command": "workbench.statusBar.focusLast",
                                         "when": "statusBarFocused" },
    { "key": "down",                  "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "right",                 "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "shift+cmd+d",           "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "shift+cmd+e",           "command": "workbench.view.explorer",
                                         "when": "viewContainer.workbench.view.explorer.enabled" },
    { "key": "shift+cmd+x",           "command": "workbench.view.extensions",
                                         "when": "viewContainer.workbench.view.extensions.enabled" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active" },
    { "key": "shift+cmd+f",           "command": "workbench.view.search",
                                         "when": "workbench.view.search.active" },
    { "key": "alt+right",             "command": "breadcrumbs.focusNextWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "alt+left",              "command": "breadcrumbs.focusPreviousWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "escape",                "command": "breadcrumbs.selectEditor",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+k down",            "command": "views.moveViewDown",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k left",            "command": "views.moveViewLeft",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k right",           "command": "views.moveViewRight",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k up",              "command": "views.moveViewUp",
                                         "when": "focusedView != ''" },
    { "key": "shift+cmd+f",           "command": "workbench.action.findInFiles" },
    { "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "f6",                    "command": "workbench.action.debug.pause",
                                         "when": "debugState == 'running'" },
    { "key": "enter",                 "command": "debug.renameWatchExpression",
                                         "when": "watchExpressionsFocused" },
    { "key": "enter",                 "command": "debug.setVariable",
                                         "when": "variablesFocused" },
    { "key": "space",                 "command": "debug.toggleBreakpoint",
                                         "when": "breakpointsFocused && !inputFocus" },
    { "key": "alt+cmd+backspace",     "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "cmd+backspace",         "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
    { "key": "escape",                "command": "editor.closeCallHierarchy",
                                         "when": "callHierarchyVisible && !config.editor.stablePeek" },
    { "key": "cmd+down",              "command": "explorer.openAndPassFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "escape",                "command": "filesExplorer.cancelCut",
                                         "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "cmd+c",                 "command": "filesExplorer.copy",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
    { "key": "cmd+x",                 "command": "filesExplorer.cut",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
    { "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "cmd+v",                 "command": "filesExplorer.paste",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "home",                  "command": "firstCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "end",                   "command": "lastCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "delete",                "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "cmd+backspace",         "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "right",                 "command": "nextCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "left",                  "command": "previousCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "delete",                "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "cmd+backspace",         "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "cmd+c",                 "command": "remote.tunnel.copyAddressInline",
                                         "when": "tunnelViewFocus && tunnelType == 'Detected' || tunnelViewFocus && tunnelType == 'Forwarded'" },
    { "key": "enter",                 "command": "remote.tunnel.label",
                                         "when": "tunnelViewFocus && tunnelType == 'Forwarded'" },
    { "key": "enter",                 "command": "renameFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "f5",                    "command": "workbench.action.debug.continue",
                                         "when": "inDebugMode" },
    { "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                         "when": "debugState != 'inactive'" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "notifications.hideList",
                                         "when": "notificationCenterVisible" },
    { "key": "ctrl+-",                "command": "workbench.action.quickInputBack",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "cmd+p",                 "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "shift+cmd+p",           "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+n",                "command": "workbench.action.quickOpenSelectNext",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpenSelectPrevious",
                                         "when": "inQuickOpen" },
    { "key": "cmd+r",                 "command": "workbench.action.reloadWindow",
                                         "when": "isDevelopment" },
    { "key": "shift+cmd+f",           "command": "workbench.action.terminal.searchWorkspace",
                                         "when": "terminalFocus && terminalProcessSupported && terminalProcessSupported && terminalTextSelected" },
    { "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools",
                                         "when": "isDevelopment" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
    { "key": "cmd+k alt+cmd+s",       "command": "git.stageSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "shift+cmd+v",           "command": "markdown.showPreview",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                         "when": "editorHasReferenceProvider" },
    { "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
    { "key": "cmd+k cmd+n",           "command": "git.unstageSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "cmd+k v",               "command": "markdown.showPreviewToSide",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f4",                    "command": "references-view.next",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "cmd+k cmd+r",           "command": "git.revertSelectedRanges",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f4",              "command": "references-view.prev",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider" },
    { "key": "alt+o",                 "command": "C_Cpp.SwitchHeaderSource",
                                         "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'" },
    { "key": "alt+cmd+r",             "command": "arduino.verify" },
    { "key": "shift+cmd+v",           "command": "aws.previewStateMachine",
                                         "when": "editorTextFocus && (editorLangId == 'asl' || !isCloud9 && editorLangId == 'asl-yaml)'" },
    { "key": "alt+cmd+a",             "command": "carbon.show" },
    { "key": "ctrl+l g",              "command": "extension.openInGitHub" },
    { "key": "cmd+k cmd+n",           "command": "extension.search",
                                         "when": "!terminalFocus" },
    { "key": "shift+cmd+r",           "command": "extension.snippetSearch",
                                         "when": "editorTextFocus" },
    { "key": "alt+h",                 "command": "git.viewFileHistory" },
    { "key": "alt+cmd+p",             "command": "gitProjectManager.openProject" },
    { "key": "left",                  "command": "gitlens.key.left",
                                         "when": "gitlens:key:left" },
    { "key": "shift+enter",           "command": "jupyter.execSelectionInteractive",
                                         "when": "editorTextFocus && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
    { "key": "cmd+l alt+m",           "command": "latex-workshop.toggleMathPreviewPanel",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+f",             "command": "liveshare.follow",
                                         "when": "liveshare:hasCollaborators && !liveshare:isFollowing" },
    { "key": "ctrl+m ctrl+m",         "command": "md-shortcut.showCommandPalette",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+r l",               "command": "npm-script.showOutput",
                                         "when": "!terminalFocus" },
    { "key": "cmd+1",                 "command": "openInDefaultBrowser.openInDefaultBrowser",
                                         "when": "resourceExtname == '.pdf' || resourceLangId == 'html' || resourceLangId == 'xml'" },
    { "key": "alt+cmd+p",             "command": "projectManager.listProjects" },
    { "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                         "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
    { "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                         "when": "editorTextFocus && !editorHasMultipleSelections && !neovim.mode && !suggestWidgetVisible && !vim.active && editorLangId == 'python'" },
    { "key": "shift+alt+r",           "command": "remote-wsl.revealInExplorer",
                                         "when": "false" },
    { "key": "alt+q",                 "command": "rewrap.rewrapComment",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+t",           "command": "tabulous.openTerminalHere" },
    { "key": "ctrl+alt+r",            "command": "terminal.run" },
    { "key": "shift+cmd+a",           "command": "workbench.action.showCommands" },
    { "key": "alt+cmd+u",             "command": "arduino.upload" },
    { "key": "ctrl+l c",              "command": "extension.copyGitHubLinkToClipboard" },
    { "key": "shift+alt+p",           "command": "gitProjectManager.openSubFolder" },
    { "key": "alt+left",              "command": "gitlens.key.alt+left",
                                         "when": "gitlens:key:alt+left" },
    { "key": "shift+enter",           "command": "jupyter.runcurrentcelladvance",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "cmd+l alt+b",           "command": "latex-workshop.build",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+/",             "command": "liveshare.followToTheSide",
                                         "when": "liveshare:hasCollaborators" },
    { "key": "ctrl+b",                "command": "md-shortcut.toggleBold",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+r shift+r",         "command": "npm-script.run",
                                         "when": "!terminalFocus" },
    { "key": "cmd+r",                 "command": "python.refreshTensorBoard",
                                         "when": "python.hasActiveTensorBoardSession && python.hasActiveTensorBoardSession" },
    { "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                         "when": "editorTextFocus && vim.active && !editorHasMultipleSelections && !suggestWidgetVisible && editorLangId == 'python' && vim.mode =~ /(Insert|Replace|SurroundInputMode)/" },
    { "key": "ctrl+alt+c",            "command": "terminal.stop" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNext",
                                         "when": "inQuickOpen" },
    { "key": "alt+cmd+i",             "command": "arduino.rebuildIntelliSenseConfig" },
    { "key": "ctrl+l p",              "command": "extension.openPrGitProvider" },
    { "key": "alt+cmd+n",             "command": "gitProjectManager.openProjectNewWindow" },
    { "key": "cmd+left",              "command": "gitlens.key.ctrl+left",
                                         "when": "gitlens:key:ctrl+left" },
    { "key": "ctrl+enter",            "command": "jupyter.runcurrentcell",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused" },
    { "key": "cmd+l alt+c",           "command": "latex-workshop.clean",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+f",             "command": "liveshare.unfollow",
                                         "when": "liveshare:hasCollaborators && liveshare:isFollowing" },
    { "key": "ctrl+i",                "command": "md-shortcut.toggleItalic",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+r r",               "command": "npm-script.rerun-last-script",
                                         "when": "!terminalFocus" },
    { "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                         "when": "editorTextFocus && !editorHasMultipleSelections && !suggestWidgetVisible && editorLangId == 'python' && neovim.mode == 'insert'" },
    { "key": "ctrl+alt+o",            "command": "terminal.open" },
    { "key": "shift+cmd+o",           "command": "workbench.action.quickOpen" },
    { "key": "alt+cmd+q",             "command": "gitProjectManager.openRecents" },
    { "key": "right",                 "command": "gitlens.key.right",
                                         "when": "gitlens:key:right" },
    { "key": "alt+enter",             "command": "jupyter.runcurrentcellandaddbelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "cmd+l alt+v",           "command": "latex-workshop.view",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+j",             "command": "liveshare.join",
                                         "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'" },
    { "key": "ctrl+l",                "command": "md-shortcut.toggleLink",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+r shift+x",         "command": "npm-script.terminate-script",
                                         "when": "!terminalFocus" },
    { "key": "ctrl+alt+t",            "command": "terminal.toggle" },
    { "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
    { "key": "alt+right",             "command": "gitlens.key.alt+right",
                                         "when": "gitlens:key:alt+right" },
    { "key": "cmd+l alt+j",           "command": "latex-workshop.synctex",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && editorLangId == 'latex'" },
    { "key": "ctrl+shift+l",          "command": "md-shortcut.toggleImage",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "f",                     "command": "notebook.find",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "cmd+r t",               "command": "npm-script.test",
                                         "when": "!terminalFocus" },
    { "key": "cmd+,",                 "command": "workbench.action.openGlobalSettings" },
    { "key": "cmd+x",                 "command": "editor.action.clipboardCutAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+right",             "command": "gitlens.key.ctrl+right",
                                         "when": "gitlens:key:ctrl+right" },
    { "key": "k",                     "command": "list.focusUp",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+m ctrl+c",         "command": "md-shortcut.toggleCodeBlock",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+l alt+x",           "command": "workbench.view.extension.latex",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled" },
    { "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction",
                                         "when": "editorTextFocus" },
    { "key": "alt+,",                 "command": "gitlens.key.alt+,",
                                         "when": "gitlens:key:," },
    { "key": "alt+cmd+m",             "command": "latex-workshop.toggleMathPreviewPanel",
                                         "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "j",                     "command": "list.focusDown",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "ctrl+m ctrl+i",         "command": "md-shortcut.toggleInlineCode",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+.",                 "command": "gitlens.key.alt+.",
                                         "when": "gitlens:key:." },
    { "key": "alt+cmd+b",             "command": "latex-workshop.build",
                                         "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+m ctrl+b",         "command": "md-shortcut.toggleBullets",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "a",                     "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "cmd+d",                 "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "gitlens.key.escape",
                                         "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible" },
    { "key": "alt+cmd+c",             "command": "latex-workshop.clean",
                                         "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+m ctrl+1",         "command": "md-shortcut.toggleNumbers",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "b",                     "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "cmd+delete",            "command": "editor.action.clipboardCutAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+/",                 "command": "gitlens.gitCommands",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "alt+cmd+v",             "command": "latex-workshop.view",
                                         "when": "!config.latex-workshop.bind.altKeymap.enabled && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+m ctrl+x",         "command": "md-shortcut.toggleCheckboxes",
                                         "when": "editorTextFocus && markdownShortcuts:enabled" },
    { "key": "d d",                   "command": "notebook.cell.delete",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+cmd+g /",           "command": "gitlens.gitCommands",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "z",                     "command": "jupyter.notebookeditor.keybind.undo",
                                         "when": "config.jupyter.enableKeyboardShortcuts && config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && notebookEditorFocused && !inputFocus && !inputFocus && notebookViewType == 'jupyter-notebook' && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+cmd+j",             "command": "latex-workshop.synctex",
                                         "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && editorLangId == 'latex'" },
    { "key": "cmd+enter",             "command": "lineBreakInsert",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+up",          "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+b",                 "command": "gitlens.toggleFileBlame",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/" },
    { "key": "s",                     "command": "jupyter.notebookeditor.keybind.save",
                                         "when": "config.jupyter.enableKeyboardShortcuts && config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && notebookEditorFocused && !inputFocus && !inputFocus && notebookViewType == 'jupyter-notebook' && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+cmd+x",             "command": "workbench.view.extension.latex",
                                         "when": "!config.latex-workshop.bind.altKeymap.enabled" },
    { "key": "shift+alt+down",        "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+cmd+g b",           "command": "gitlens.toggleFileBlame",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/" },
    { "key": "cmd+l [",               "command": "latex-workshop.promote-sectioning",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "c",                     "command": "notebook.cell.copy",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "cmd+backspace",         "command": "editor.action.deleteLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+b",           "command": "gitlens.toggleCodeLens",
                                         "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
    { "key": "cmd+l ]",               "command": "latex-workshop.demote-sectioning",
                                         "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "x",                     "command": "notebook.cell.cut",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "shift+enter",           "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+cmd+g shift+b",     "command": "gitlens.toggleCodeLens",
                                         "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
    { "key": "alt+cmd+[",             "command": "latex-workshop.promote-sectioning",
                                         "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "v",                     "command": "notebook.cell.paste",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+cmd+enter",         "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+h",                 "command": "gitlens.showQuickFileHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "o",                     "command": "jupyter.notebookeditor.keybind.toggleOutput",
                                         "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'" },
    { "key": "alt+cmd+]",             "command": "latex-workshop.demote-sectioning",
                                         "when": "editorTextFocus && !config.latex-workshop.bind.altKeymap.enabled && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "cmd+-",                 "command": "editor.fold",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+g h",           "command": "gitlens.showQuickFileHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "cmd+l cmd+enter",       "command": "latex-workshop.shortcut.item",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+shift+-",          "command": "notebook.cell.split",
                                         "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'" },
    { "key": "shift+alt+h",           "command": "gitlens.showQuickRepoHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "cmd+l cmd+b",           "command": "latex-workshop.shortcut.textbf",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                         "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'" },
    { "key": "cmd+s",                 "command": "workbench.action.files.saveAll" },
    { "key": "cmd+=",                 "command": "editor.unfold",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+g shift+h",     "command": "gitlens.showQuickRepoHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+; s",              "command": "jupyter.insertCellBelowPosition",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+i",           "command": "latex-workshop.shortcut.textit",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+s",                 "command": "gitlens.showQuickRepoStatus",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "ctrl+; b",              "command": "jupyter.insertCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+u",           "command": "latex-workshop.shortcut.underline",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+y",             "command": "workbench.action.sync" },
    { "key": "shift+cmd+-",           "command": "editor.foldAll",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+g s",           "command": "gitlens.showQuickRepoStatus",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+; a",              "command": "jupyter.insertCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+e",           "command": "latex-workshop.shortcut.emph",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+cmd+numpad_subtract", "command": "editor.foldAll",
                                         "when": "editorFocus" },
    { "key": "alt+c",                 "command": "gitlens.showQuickCommitFileDetails",
                                         "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "ctrl+; x",              "command": "jupyter.deleteCells",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+r",           "command": "latex-workshop.shortcut.textrm",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+cmd+=",           "command": "editor.unfoldAll",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+g c",           "command": "gitlens.showQuickCommitFileDetails",
                                         "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+shift+alt+[",      "command": "jupyter.extendSelectionByCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+t",           "command": "latex-workshop.shortcut.texttt",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+,",                 "command": "gitlens.diffWithPrevious",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+shift+alt+]",      "command": "jupyter.extendSelectionByCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+s",           "command": "latex-workshop.shortcut.textsl",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "cmd+/",                 "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPrevious",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+; u",              "command": "jupyter.moveCellsUp",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+c",           "command": "latex-workshop.shortcut.textsc",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "cmd+numpad_divide",     "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+; d",              "command": "jupyter.moveCellsDown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+n",           "command": "latex-workshop.shortcut.textnormal",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+/",             "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+; m",              "command": "jupyter.changeCellToMarkdown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+6",           "command": "latex-workshop.shortcut.textsuperscript",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+numpad_divide", "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+; c",              "command": "jupyter.changeCellToCode",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+l cmd+-",           "command": "latex-workshop.shortcut.textsubscript",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+cmd+g",            "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+]",            "command": "jupyter.gotoNextCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+m cmd+b",           "command": "latex-workshop.shortcut.mathbf",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+up",                "command": "editor.action.smartSelect.grow",
                                         "when": "editorTextFocus" },
    { "key": "alt+.",                 "command": "gitlens.diffWithNext",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+alt+[",            "command": "jupyter.gotoPrevCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+m cmd+i",           "command": "latex-workshop.shortcut.mathit",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+down",              "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+g .",           "command": "gitlens.diffWithNext",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "cmd+m cmd+r",           "command": "latex-workshop.shortcut.mathrm",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "cmd+f",                 "command": "actions.find" },
    { "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+shift+alt+\\",     "command": "jupyter.selectCell",
                                         "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
    { "key": "cmd+m cmd+t",           "command": "latex-workshop.shortcut.mathtt",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "cmd+r",                 "command": "jupyter.refreshDataViewer",
                                         "when": "jupyter.dataViewerActive" },
    { "key": "cmd+m cmd+s",           "command": "latex-workshop.shortcut.mathsf",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+cmd+f",           "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && !searchViewletVisible" },
    { "key": "cmd+r",                 "command": "editor.action.startFindReplaceAction" },
    { "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "cmd+m shift+cmd+b",     "command": "latex-workshop.shortcut.mathbb",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "cmd+m cmd+c",           "command": "latex-workshop.shortcut.mathcal",
                                         "when": "editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+cmd+r",           "command": "workbench.action.replaceInFiles" },
    { "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+l cmd+l",           "command": "expandLineSelection",
                                         "when": "textInputFocus && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "shift+alt+.",           "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+l cmd+m",           "command": "editor.action.toggleTabFocusMode",
                                         "when": "textInputFocus && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+g shift+.",     "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+g",                "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "shift+alt+,",           "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "cmd+l cmd+w",           "command": "latex-workshop.surround",
                                         "when": "editorHasSelection && editorTextFocus && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+shift+g",          "command": "cursorUndo",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+g shift+,",     "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "enter",                 "command": "latex-workshop.onEnterKey",
                                         "when": "acceptSuggestionOnEnter && editorTextFocus && vim.active && !editorReadonly && !suggestWidgetVisible && vim.mode == 'Insert' && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+g",                "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "latex-workshop.onEnterKey",
                                         "when": "editorTextFocus && vim.active && !acceptSuggestionOnEnter && !editorReadonly && vim.mode == 'Insert' && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "gitlens.views.branches.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/" },
    { "key": "enter",                 "command": "latex-workshop.onEnterKey",
                                         "when": "acceptSuggestionOnEnter && editorTextFocus && !editorReadonly && !suggestWidgetVisible && !vim.active && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "gitlens.views.commits.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/" },
    { "key": "enter",                 "command": "latex-workshop.onEnterKey",
                                         "when": "editorTextFocus && !acceptSuggestionOnEnter && !editorReadonly && !vim.active && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "cmd+p",                 "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "cmd+c",                 "command": "gitlens.views.contributors.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/" },
    { "key": "alt+enter",             "command": "latex-workshop.onAltEnterKey",
                                         "when": "acceptSuggestionOnEnter && editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+l",             "command": "editor.action.formatDocument",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "gitlens.views.fileHistory.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/" },
    { "key": "alt+enter",             "command": "latex-workshop.onAltEnterKey",
                                         "when": "editorTextFocus && !acceptSuggestionOnEnter && !editorReadonly && editorLangId =~ /latex|rsweave|jlweave/" },
    { "key": "alt+cmd+l",             "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "gitlens.views.lineHistory.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/" },
    { "key": "alt+cmd+l",             "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "gitlens.views.remotes.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/" },
    { "key": "cmd+b",                 "command": "editor.action.goToDeclaration",
                                         "when": "editorHasDefinitionProvider && editorTextFocus" },
    { "key": "cmd+c",                 "command": "gitlens.views.repositories.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/" },
    { "key": "alt+cmd+b",             "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "cmd+c",                 "command": "gitlens.views.stashes.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/" },
    { "key": "alt+space",             "command": "editor.action.previewDeclaration",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "cmd+c",                 "command": "gitlens.views.searchAndCompare.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/" },
    { "key": "cmd+y",                 "command": "editor.action.previewDeclaration",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "cmd+c",                 "command": "gitlens.views.tags.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/" },
    { "key": "cmd+.",                 "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+enter",             "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f7",                "command": "editor.action.referenceSearch.trigger",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "cmd+f9",                "command": "workbench.action.tasks.build" },
    { "key": "ctrl+alt+r",            "command": "workbench.action.tasks.runTask" },
    { "key": "ctrl+alt+d",            "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "ctrl+d",                "command": "workbench.action.debug.run",
                                         "when": "!inDebugMode && !terminalFocus" },
    { "key": "shift+f6",              "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "shift+f6",              "command": "renameFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus" },
    { "key": "cmd+o",                 "command": "workbench.action.showAllSymbols" },
    { "key": "cmd+l",                 "command": "workbench.action.gotoLine" },
    { "key": "shift+cmd+o",           "command": "workbench.action.quickOpen" },
    { "key": "ctrl+shift+j",          "command": "editor.action.joinLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+e",                 "command": "workbench.action.quickOpenNavigateNext",
                                         "when": "inQuickOpen" },
    { "key": "cmd+e",                 "command": "-actions.find" },
    { "key": "cmd+e",                 "command": "-workbench.action.openRecent" },
    { "key": "cmd+e",                 "command": "workbench.action.openRecent" },
    { "key": "cmd+f12",               "command": "workbench.action.gotoSymbol",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+o",             "command": "workbench.action.gotoSymbol" },
    { "key": "ctrl+left",             "command": "workbench.action.previousEditor" },
    { "key": "ctrl+right",            "command": "workbench.action.nextEditor" },
    { "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
    { "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
    { "key": "shift+cmd+[",           "command": "workbench.action.terminal.focusPrevious",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+]",           "command": "workbench.action.terminal.focusNext",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "shift+escape",          "command": "workbench.actions.view.problems",
                                         "when": "problemFocus && workbench.panel.markers.view.active" },
    { "key": "shift+escape",          "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus && !inDebugRepl && !problemFocus && !terminalFocus" },
    { "key": "alt+f12",               "command": "workbench.action.terminal.focus",
                                         "when": "terminalProcessSupported && !terminalFocus" },
    { "key": "alt+f12",               "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active && terminalFocus" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active && terminalFocus" },
    { "key": "cmd+down",              "command": "editor.action.goToDeclaration",
                                         "when": "editorHasDefinitionProvider && editorTextFocus" },
    { "key": "alt+cmd+left",          "command": "workbench.action.navigateBack" },
    { "key": "cmd+[",                 "command": "workbench.action.navigateBack" },
    { "key": "alt+cmd+right",         "command": "workbench.action.navigateForward" },
    { "key": "cmd+]",                 "command": "workbench.action.navigateForward" },
    { "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
    { "key": "shift+alt+tab",         "command": "workbench.action.focusPreviousGroup",
                                         "when": "editorFocus" },
    { "key": "alt+tab",               "command": "workbench.action.focusNextGroup",
                                         "when": "editorFocus" },
    { "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile",
                                         "when": "!editorTextFocus" },
    { "key": "cmd+f8",                "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && editorTextFocus" },
    { "key": "shift+cmd+f8",          "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "f9",                    "command": "workbench.action.debug.continue",
                                         "when": "inDebugMode" },
    { "key": "f7",                    "command": "workbench.action.debug.stepInto",
                                         "when": "inDebugMode" },
    { "key": "f7",                    "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+f7",              "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+f8",              "command": "workbench.action.debug.stepOut",
                                         "when": "inDebugMode" },
    { "key": "alt+f8",                "command": "workbench.debug.action.toggleRepl",
                                         "when": "workbench.panel.repl.view.active" },
    { "key": "alt+f8",                "command": "editor.debug.action.selectionToRepl",
                                         "when": "editorHasSelection && editorTextFocus" },
    { "key": "alt+f9",                "command": "editor.debug.action.runToCursor",
                                         "when": "inDebugMode" },
    { "key": "alt+cmd+r",             "command": "workbench.action.debug.continue",
                                         "when": "inDebugMode" },
    { "key": "f8",                    "command": "workbench.action.debug.stepOver",
                                         "when": "inDebugMode" },
    { "key": "cmd+f2",                "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode" },
    { "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "ctrl+j",                "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active" },
    { "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && terminalTextSelected" },
    { "key": "shift+cmd+enter",       "command": "acceptSelectedSuggestion",
                                         "when": "editorFocus && suggestWidgetVisible" },
    { "key": "shift+cmd+enter",       "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "cmd+f1",                "command": "workbench.action.showErrorsWarnings",
                                         "when": "editorTextFocus" },
    { "key": "alt+backspace",         "command": "deleteWordLeft",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+delete",            "command": "deleteWordRight",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+numpad_add",        "command": "editor.unfold",
                                         "when": "editorFocus" },
    { "key": "cmd+-",                 "command": "editor.fold",
                                         "when": "editorFocus" },
    { "key": "cmd+numpad_subtract",   "command": "editor.fold",
                                         "when": "editorFocus" },
    { "key": "shift+cmd+numpad_add",  "command": "editor.unfoldAll",
                                         "when": "editorFocus" },
    { "key": "f2",                    "command": "-editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f4",                    "command": "editor.action.goToDeclaration",
                                         "when": "editorHasDefinitionProvider && editorTextFocus" },
    { "key": "ctrl+shift+alt+up",     "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+alt+down",   "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus" },
    { "key": "cmd+k",                 "command": "git.commitAll",
                                         "when": "!inDebugMode && !terminalFocus" },
    { "key": "shift+cmd+k",           "command": "git.pushTo",
                                         "when": "!inDebugMode && !terminalFocus" },
    { "key": "cmd+t",                 "command": "git.sync" },
    { "key": "alt+cmd+m",             "command": "editor.action.codeAction",
                                         "when": "editorTextFocus",
                                         "args": {"kind":"refactor.extract.function","apply":"ifSingle"} },
    { "key": "alt+cmd+v",             "command": "editor.action.codeAction",
                                         "when": "editorTextFocus",
                                         "args": {"kind":"refactor.extract.constant","apply":"ifSingle"} },
    { "key": "ctrl+t",                "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+0",                 "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "cmd+1",                 "command": "workbench.view.explorer",
                                         "when": "editorFocus && viewContainer.workbench.view.explorer.enabled" },
    { "key": "cmd+1",                 "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "cmd+numpad0",           "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "cmd+numpad1",           "command": "workbench.view.explorer",
                                         "when": "editorFocus && viewContainer.workbench.view.explorer.enabled" },
    { "key": "cmd+numpad1",           "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "cmd+3",                 "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && !searchViewletVisible" },
    { "key": "cmd+3",                 "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "searchViewletVisible" },
    { "key": "cmd+numpad3",           "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && !searchViewletVisible" },
    { "key": "cmd+numpad3",           "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "searchViewletVisible" },
    { "key": "cmd+5",                 "command": "workbench.view.debug",
                                         "when": "editorFocus && viewContainer.workbench.view.debug.enabled" },
    { "key": "cmd+5",                 "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "cmd+numpad5",           "command": "workbench.view.debug",
                                         "when": "editorFocus && viewContainer.workbench.view.debug.enabled" },
    { "key": "cmd+numpad5",           "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "cmd+9",                 "command": "workbench.view.scm",
                                         "when": "editorFocus && workbench.scm.active" },
    { "key": "cmd+9",                 "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "cmd+numpad9",           "command": "workbench.view.git",
                                         "when": "editorFocus" },
    { "key": "cmd+numpad9",           "command": "workbench.action.toggleSidebarVisibility",
                                         "when": "!editorFocus" },
    { "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen" },
    { "key": "cmd+,",                 "command": "workbench.action.openGlobalSettings" },
    { "key": "ctrl+`",                "command": "workbench.action.selectTheme" },
    { "key": "cmd+numpad_separator",  "command": "workbench.action.openGlobalSettings" },
    { "key": "cmd+;",                 "command": "workbench.action.tasks.configureTaskRunner" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder" },
    { "key": "shift+cmd+f12",         "command": "workbench.action.maximizeEditor" }
    ]
    
    
    // Here are other available commands: 
    // - C_Cpp.BuildAndDebugActiveFile
    // - C_Cpp.CheckForCompiler
    // - C_Cpp.ConfigurationEditJSON
    // - C_Cpp.ConfigurationEditUI
    // - C_Cpp.ConfigurationProviderSelect
    // - C_Cpp.ConfigurationSelect
    // - C_Cpp.DisableErrorSquiggles
    // - C_Cpp.EnableErrorSquiggles
    // - C_Cpp.GenerateEditorConfig
    // - C_Cpp.GoToNextDirectiveInGroup
    // - C_Cpp.GoToPrevDirectiveInGroup
    // - C_Cpp.LogDiagnostics
    // - C_Cpp.RescanWorkspace
    // - C_Cpp.ResetDatabase
    // - C_Cpp.TakeSurvey
    // - C_Cpp.ToggleDimInactiveRegions
    // - C_Cpp.ToggleIncludeFallback
    // - C_Cpp.VcpkgClipboardInstallSuggested
    // - C_Cpp.VcpkgOnlineHelpSuggested
    // - C_Cpp.referencesViewGroupByType
    // - C_Cpp.referencesViewUngroupByType
    // - CppReferencesView.focus
    // - CppReferencesView.resetViewLocation
    // - TabNine.statusBar
    // - TabNine::config
    // - TabNine::validatorClearCache
    // - TabNine::validatorSetThreshold
    // - TabNine::validatorToggle
    // - acceptSelectedSuggestionOnEnter
    // - acceptSnippet
    // - addRootFolder
    // - addgitignore
    // - arduino.changeBaudRate
    // - arduino.changeBoardType
    // - arduino.cliUpload
    // - arduino.cliUploadUsingProgrammer
    // - arduino.closeSerialMonitor
    // - arduino.initialize
    // - arduino.installBoard
    // - arduino.loadPackages
    // - arduino.openExample
    // - arduino.openSerialMonitor
    // - arduino.reloadExample
    // - arduino.selectProgrammer
    // - arduino.selectSerialPort
    // - arduino.selectSketch
    // - arduino.sendMessageToSerialPort
    // - arduino.showBoardConfig
    // - arduino.showBoardManager
    // - arduino.showExamples
    // - arduino.showLibraryManager
    // - arduino.uploadUsingProgrammer
    // - arduinoExampleExplorer.focus
    // - arduinoExampleExplorer.resetViewLocation
    // - autoflake.removeUnused
    // - aws.aboutToolkit
    // - aws.addLogEvents
    // - aws.addSamDebugConfig
    // - aws.addSamDebugConfiguration
    // - aws.apig.copyUrl
    // - aws.apig.invokeRemoteRestApi
    // - aws.cdk.explorer.focus
    // - aws.cdk.explorer.removeView
    // - aws.cdk.explorer.resetViewLocation
    // - aws.cdk.explorer.toggleVisibility
    // - aws.cdk.help
    // - aws.cloudWatchLogs.viewLogStream
    // - aws.copyArn
    // - aws.copyLogStreamName
    // - aws.copyName
    // - aws.createIssueOnGitHub
    // - aws.credential.profile.create
    // - aws.deleteCloudFormation
    // - aws.deleteLambda
    // - aws.deploySamApplication
    // - aws.doNothingCommand
    // - aws.downloadSchemaItemCode
    // - aws.downloadStateMachineDefinition
    // - aws.ecr.copyRepositoryUri
    // - aws.ecr.copyTagUri
    // - aws.ecr.createRepository
    // - aws.ecr.deleteRepository
    // - aws.ecr.deleteTag
    // - aws.executeStateMachine
    // - aws.explorer.focus
    // - aws.explorer.removeView
    // - aws.explorer.resetViewLocation
    // - aws.explorer.toggleVisibility
    // - aws.github
    // - aws.help
    // - aws.hideRegion
    // - aws.importLambda
    // - aws.invokeLambda
    // - aws.lambda.createNewSamApp
    // - aws.launchConfigForm
    // - aws.loadMoreChildren
    // - aws.login
    // - aws.logout
    // - aws.pickAddSamDebugConfiguration
    // - aws.quickStart
    // - aws.refreshAwsExplorer
    // - aws.refreshAwsExplorerNode
    // - aws.refreshCdkExplorer
    // - aws.s3.copyPath
    // - aws.s3.createBucket
    // - aws.s3.createFolder
    // - aws.s3.deleteBucket
    // - aws.s3.deleteFile
    // - aws.s3.downloadFileAs
    // - aws.s3.uploadFile
    // - aws.s3.uploadFileToParent
    // - aws.samcli.detect
    // - aws.saveCurrentLogStreamContent
    // - aws.searchSchema
    // - aws.searchSchemaPerRegistry
    // - aws.showErrorDetails
    // - aws.showRegion
    // - aws.ssmDocument.createLocalDocument
    // - aws.ssmDocument.deleteDocument
    // - aws.ssmDocument.openLocalDocument
    // - aws.ssmDocument.openLocalDocumentJson
    // - aws.ssmDocument.openLocalDocumentYaml
    // - aws.ssmDocument.publishDocument
    // - aws.ssmDocument.updateDocumentVersion
    // - aws.stepfunctions.createStateMachineFromTemplate
    // - aws.stepfunctions.publishStateMachine
    // - aws.submitFeedback
    // - aws.toggleSamCodeLenses
    // - aws.uploadLambda
    // - aws.viewLogs
    // - aws.viewLogsAtMessage
    // - aws.viewSchemaItem
    // - bazel.buildAll
    // - bazel.buildAllRecursive
    // - bazel.buildTarget
    // - bazel.buildTargetWithDebugging
    // - bazel.clean
    // - bazel.copyTargetToClipboard
    // - bazel.refreshBazelBuildTargets
    // - bazel.testAll
    // - bazel.testAllRecursive
    // - bazel.testTarget
    // - bazelWorkspace.focus
    // - bazelWorkspace.resetViewLocation
    // - bracket-pair-colorizer.expandBracketSelection
    // - bracket-pair-colorizer.undoBracketSelection
    // - breadcrumbs.toggle
    // - cSpell.addIgnoreWord
    // - cSpell.addIgnoreWordToFolder
    // - cSpell.addIgnoreWordToUser
    // - cSpell.addIgnoreWordToWorkspace
    // - cSpell.addWordToDictionary
    // - cSpell.addWordToDictionarySilent
    // - cSpell.addWordToFolderDictionary
    // - cSpell.addWordToUserDictionary
    // - cSpell.addWordToUserDictionarySilent
    // - cSpell.addWordToWorkspaceDictionary
    // - cSpell.addWordToWorkspaceDictionarySilent
    // - cSpell.disableCurrentLanguage
    // - cSpell.disableForGlobal
    // - cSpell.disableForWorkspace
    // - cSpell.disableLanguage
    // - cSpell.displayCSpellInfo
    // - cSpell.editText
    // - cSpell.enableCurrentLanguage
    // - cSpell.enableForGlobal
    // - cSpell.enableForWorkspace
    // - cSpell.enableLanguage
    // - cSpell.logPerfTimeline
    // - cSpell.removeWordFromFolderDictionary
    // - cSpell.removeWordFromUserDictionary
    // - cSpell.removeWordFromWorkspaceDictionary
    // - cSpell.toggleEnableForGlobal
    // - cSpell.toggleEnableSpellChecker
    // - cSpellRegExpTester.editRegExp
    // - cSpellRegExpTester.selectRegExp
    // - cSpellRegExpTester.testRegExp
    // - cSpellRegExpView.focus
    // - cSpellRegExpView.resetViewLocation
    // - callStack.collapse
    // - changeEditorIndentation
    // - cleanSearchEditorState
    // - closeReferenceSearchEditor
    // - codelens.showLensesInCurrentLine
    // - columnSelect
    // - comments.collapse
    // - commitViewProvider.focus
    // - commitViewProvider.resetViewLocation
    // - compareCommitViewProvider.focus
    // - compareCommitViewProvider.resetViewLocation
    // - compareFiles
    // - compareSelected
    // - compositionEnd
    // - compositionStart
    // - compositionType
    // - configureExtensionsAutoUpdate.all
    // - configureExtensionsAutoUpdate.enabled
    // - configureExtensionsAutoUpdate.none
    // - createCursor
    // - currentBranchInfo.focus
    // - currentBranchInfo.resetViewLocation
    // - cursorRedo
    // - cursorWordAccessibilityLeft
    // - cursorWordAccessibilityLeftSelect
    // - cursorWordAccessibilityRight
    // - cursorWordAccessibilityRightSelect
    // - cursorWordEndLeft
    // - cursorWordEndLeftSelect
    // - cursorWordPartStartLeft
    // - cursorWordPartStartLeftSelect
    // - cursorWordRight
    // - cursorWordRightSelect
    // - cursorWordStartLeft
    // - cursorWordStartLeftSelect
    // - cursorWordStartRight
    // - cursorWordStartRightSelect
    // - cut
    // - debug.addConfiguration
    // - debug.addToWatchExpressions
    // - debug.breakWhenValueChanges
    // - debug.breakWhenValueIsAccessed
    // - debug.breakWhenValueIsRead
    // - debug.collapseRepl
    // - debug.copyEvaluatePath
    // - debug.copyStackTrace
    // - debug.editBreakpoint
    // - debug.editFunctionBreakpoint
    // - debug.editFunctionBreakpointHitCount
    // - debug.enableOrDisableBreakpoint
    // - debug.installAdditionalDebuggers
    // - debug.jumpToCursor
    // - debug.replCopy
    // - debug.replPaste
    // - debug.startFromConfig
    // - debug.toggleReplIgnoreFocus
    // - default:compositionEnd
    // - default:compositionStart
    // - default:compositionType
    // - default:cut
    // - default:paste
    // - default:redo
    // - default:replacePreviousChar
    // - default:type
    // - default:undo
    // - deleteInsideWord
    // - deleteWordEndLeft
    // - deleteWordEndRight
    // - deleteWordStartLeft
    // - deleteWordStartRight
    // - detailsContainers.focus
    // - detailsContainers.resetViewLocation
    // - devVolumes.focus
    // - devVolumes.resetViewLocation
    // - dockerContainers.focus
    // - dockerContainers.removeView
    // - dockerContainers.resetViewLocation
    // - dockerContainers.toggleVisibility
    // - dockerImages.focus
    // - dockerImages.removeView
    // - dockerImages.resetViewLocation
    // - dockerImages.toggleVisibility
    // - dockerNetworks.focus
    // - dockerNetworks.removeView
    // - dockerNetworks.resetViewLocation
    // - dockerNetworks.toggleVisibility
    // - dockerRegistries.focus
    // - dockerRegistries.removeView
    // - dockerRegistries.resetViewLocation
    // - dockerRegistries.toggleVisibility
    // - dockerVolumes.focus
    // - dockerVolumes.removeView
    // - dockerVolumes.resetViewLocation
    // - dockerVolumes.toggleVisibility
    // - editor.action.addCursorsToBottom
    // - editor.action.addCursorsToTop
    // - editor.action.addSelectionToPreviousFindMatch
    // - editor.action.clipboardCopyWithSyntaxHighlightingAction
    // - editor.action.detectIndentation
    // - editor.action.duplicateSelection
    // - editor.action.findReferences
    // - editor.action.fixAll
    // - editor.action.fontZoomIn
    // - editor.action.fontZoomOut
    // - editor.action.fontZoomReset
    // - editor.action.forceRetokenize
    // - editor.action.format
    // - editor.action.formatChanges
    // - editor.action.formatDocument.multiple
    // - editor.action.formatSelection.multiple
    // - editor.action.goToSelectionAnchor
    // - editor.action.goToTypeDefinition
    // - editor.action.indentUsingSpaces
    // - editor.action.indentUsingTabs
    // - editor.action.indentationToSpaces
    // - editor.action.indentationToTabs
    // - editor.action.insertSnippet
    // - editor.action.inspectTMScopes
    // - editor.action.measureExtHostLatency
    // - editor.action.moveCarretLeftAction
    // - editor.action.moveCarretRightAction
    // - editor.action.moveSelectionToPreviousFindMatch
    // - editor.action.nextCommentThreadAction
    // - editor.action.openDeclarationToTheSide
    // - editor.action.openLink
    // - editor.action.peekDeclaration
    // - editor.action.peekTypeDefinition
    // - editor.action.reindentlines
    // - editor.action.reindentselectedlines
    // - editor.action.resetSuggestSize
    // - editor.action.revealDeclaration
    // - editor.action.selectToBracket
    // - editor.action.showDefinitionPreviewHover
    // - editor.action.showReferences
    // - editor.action.showSnippets
    // - editor.action.sortLinesAscending
    // - editor.action.sortLinesDescending
    // - editor.action.sourceAction
    // - editor.action.startDebugTextMate
    // - editor.action.toggleColumnSelection
    // - editor.action.toggleMinimap
    // - editor.action.toggleRenderControlCharacter
    // - editor.action.toggleRenderWhitespace
    // - editor.action.transformToLowercase
    // - editor.action.transformToSnakecase
    // - editor.action.transformToTitlecase
    // - editor.action.transformToUppercase
    // - editor.action.transpose
    // - editor.action.wordHighlight.trigger
    // - editor.debug.action.addLogPoint
    // - editor.debug.action.conditionalBreakpoint
    // - editor.debug.action.goToNextBreakpoint
    // - editor.debug.action.goToPreviousBreakpoint
    // - editor.debug.action.selectionToWatch
    // - editor.debug.action.stepIntoTargets
    // - editor.emmet.action.balanceIn
    // - editor.emmet.action.balanceOut
    // - editor.emmet.action.decrementNumberByOne
    // - editor.emmet.action.decrementNumberByOneTenth
    // - editor.emmet.action.decrementNumberByTen
    // - editor.emmet.action.evaluateMathExpression
    // - editor.emmet.action.incrementNumberByOne
    // - editor.emmet.action.incrementNumberByOneTenth
    // - editor.emmet.action.incrementNumberByTen
    // - editor.emmet.action.matchTag
    // - editor.emmet.action.mergeLines
    // - editor.emmet.action.nextEditPoint
    // - editor.emmet.action.prevEditPoint
    // - editor.emmet.action.reflectCSSValue
    // - editor.emmet.action.removeTag
    // - editor.emmet.action.selectNextItem
    // - editor.emmet.action.selectPrevItem
    // - editor.emmet.action.splitJoinTag
    // - editor.emmet.action.toggleComment
    // - editor.emmet.action.updateImageSize
    // - editor.emmet.action.updateTag
    // - editor.emmet.action.wrapWithAbbreviation
    // - emmet.expandAbbreviation
    // - errorLens.copyProblemMessage
    // - errorLens.toggle
    // - errorLens.toggleError
    // - errorLens.toggleHint
    // - errorLens.toggleInfo
    // - errorLens.toggleWarning
    // - eslint.createConfig
    // - eslint.executeAutofix
    // - eslint.manageLibraryExecution
    // - eslint.migrateSettings
    // - eslint.resetLibraryExecution
    // - eslint.restart
    // - eslint.selectNodePath
    // - eslint.selectNodeRuntime
    // - eslint.showOutputChannel
    // - explorer.download
    // - explorer.newFile
    // - explorer.newFolder
    // - explorer.openWith
    // - extension.Gitmoji
    // - extension.bisect.next
    // - extension.bisect.start
    // - extension.bisect.stop
    // - extension.chrome-debug.toggleSkippingFile
    // - extension.chrome-debug.toggleSmartStep
    // - extension.js-debug.addCustomBreakpoints
    // - extension.js-debug.autoAttachToProcess
    // - extension.js-debug.clearAutoAttachVariables
    // - extension.js-debug.createDebuggerTerminal
    // - extension.js-debug.createDiagnostics
    // - extension.js-debug.debugLink
    // - extension.js-debug.npmScript
    // - extension.js-debug.pickNodeProcess
    // - extension.js-debug.prettyPrint
    // - extension.js-debug.removeAllCustomBreakpoints
    // - extension.js-debug.removeCustomBreakpoint
    // - extension.js-debug.requestCDPProxy
    // - extension.js-debug.revealPage
    // - extension.js-debug.setAutoAttachVariables
    // - extension.js-debug.startProfile
    // - extension.js-debug.stopProfile
    // - extension.js-debug.toggleSkippingFile
    // - extension.jsProfileVisualizer.table.clearCodeLenses
    // - extension.liveshare.chatStatusBar
    // - extension.node-debug.attachNodeProcess
    // - extension.node-debug.toggleAutoAttach
    // - extension.node-debug.toggleSkippingFile
    // - extension.node-debug2.toggleSkippingFile
    // - extension.open
    // - extension.pickNativeProcess
    // - extension.pickRemoteNativeProcess
    // - extension.pwa-node-debug.attachNodeProcess
    // - extension.stayClassy
    // - extensions.actions.searchByCategory.Azure
    // - extensions.actions.searchByCategory.Data Science
    // - extensions.actions.searchByCategory.Debuggers
    // - extensions.actions.searchByCategory.Education
    // - extensions.actions.searchByCategory.Extension Packs
    // - extensions.actions.searchByCategory.Formatters
    // - extensions.actions.searchByCategory.Keymaps
    // - extensions.actions.searchByCategory.Language Packs
    // - extensions.actions.searchByCategory.Linters
    // - extensions.actions.searchByCategory.Machine Learning
    // - extensions.actions.searchByCategory.Notebooks
    // - extensions.actions.searchByCategory.Other
    // - extensions.actions.searchByCategory.Programming Languages
    // - extensions.actions.searchByCategory.SCM Providers
    // - extensions.actions.searchByCategory.Snippets
    // - extensions.actions.searchByCategory.Testing
    // - extensions.actions.searchByCategory.Themes
    // - extensions.actions.searchByCategory.Visualization
    // - extensions.filter.featured
    // - extensions.recommendedList.focus
    // - extensions.recommendedList.resetViewLocation
    // - extensions.sort.installs
    // - extensions.sort.name
    // - extensions.sort.publishedDate
    // - extensions.sort.rating
    // - files.openTimeline
    // - files.participants.resetChoice
    // - filesExplorer.findInWorkspace
    // - getContextKeyInfo
    // - gettingStarted.markStepComplete
    // - gettingStarted.markStepIncomplete
    // - git-graph.addGitRepository
    // - git-graph.clearAvatarCache
    // - git-graph.endAllWorkspaceCodeReviews
    // - git-graph.endSpecificWorkspaceCodeReview
    // - git-graph.fetch
    // - git-graph.openFile
    // - git-graph.removeGitRepository
    // - git-graph.resumeWorkspaceCodeReview
    // - git-graph.version
    // - git-graph.view
    // - git._syncAll
    // - git.addRemote
    // - git.api.getRemoteSources
    // - git.api.getRepositories
    // - git.api.getRepositoryState
    // - git.branch
    // - git.branchFrom
    // - git.checkout
    // - git.checkoutDetached
    // - git.cherryPick
    // - git.clean
    // - git.cleanAll
    // - git.cleanAllTracked
    // - git.cleanAllUntracked
    // - git.clone
    // - git.cloneRecursive
    // - git.close
    // - git.commit
    // - git.commit.FileEntry.CompareAgainstPrevious
    // - git.commit.FileEntry.CompareAgainstWorkspace
    // - git.commit.FileEntry.ViewFileContents
    // - git.commit.FileEntry.ViewPreviousFileContents
    // - git.commit.FileEntry.compare
    // - git.commit.FileEntry.selectForComparison
    // - git.commit.ViewChangeLog
    // - git.commit.checkout
    // - git.commit.cherryPick
    // - git.commit.compare
    // - git.commit.compare.file.compare
    // - git.commit.compare.selectForComparison
    // - git.commit.compare.view.hide
    // - git.commit.compare.view.show
    // - git.commit.compare.view.showFilesOnly
    // - git.commit.compare.view.showFolderView
    // - git.commit.createBranch
    // - git.commit.createTag
    // - git.commit.doSomething
    // - git.commit.merge
    // - git.commit.rebase
    // - git.commit.removeBranch
    // - git.commit.removeRemote
    // - git.commit.removeTag
    // - git.commit.revert
    // - git.commit.selected
    // - git.commit.view.hide
    // - git.commit.view.show
    // - git.commit.view.showFilesOnly
    // - git.commit.view.showFolderView
    // - git.commitAllAmend
    // - git.commitAllAmendNoVerify
    // - git.commitAllNoVerify
    // - git.commitAllSigned
    // - git.commitAllSignedNoVerify
    // - git.commitEmpty
    // - git.commitEmptyNoVerify
    // - git.commitNoVerify
    // - git.commitStaged
    // - git.commitStagedAmend
    // - git.commitStagedAmendNoVerify
    // - git.commitStagedNoVerify
    // - git.commitStagedSigned
    // - git.commitStagedSignedNoVerify
    // - git.createTag
    // - git.deleteBranch
    // - git.deleteTag
    // - git.fetch
    // - git.fetchAll
    // - git.fetchPrune
    // - git.ignore
    // - git.init
    // - git.merge
    // - git.openAllChanges
    // - git.openChange
    // - git.openFile
    // - git.openFile2
    // - git.openFileInViewer
    // - git.openHEADFile
    // - git.openRepository
    // - git.openResource
    // - git.publish
    // - git.pull
    // - git.pullFrom
    // - git.pullRebase
    // - git.push
    // - git.pushForce
    // - git.pushTags
    // - git.pushToForce
    // - git.pushWithTags
    // - git.pushWithTagsForce
    // - git.rebase
    // - git.rebaseAbort
    // - git.refresh
    // - git.removeRemote
    // - git.rename
    // - git.renameBranch
    // - git.restoreCommitTemplate
    // - git.revealInExplorer
    // - git.revertChange
    // - git.setLogLevel
    // - git.showOutput
    // - git.stage
    // - git.stageAll
    // - git.stageAllMerge
    // - git.stageAllTracked
    // - git.stageAllUntracked
    // - git.stageChange
    // - git.stash
    // - git.stashApply
    // - git.stashApplyLatest
    // - git.stashDrop
    // - git.stashIncludeUntracked
    // - git.stashPop
    // - git.stashPopLatest
    // - git.syncRebase
    // - git.timeline.compareWithSelected
    // - git.timeline.copyCommitId
    // - git.timeline.copyCommitMessage
    // - git.timeline.openDiff
    // - git.timeline.selectForCompare
    // - git.undoCommit
    // - git.unstage
    // - git.unstageAll
    // - git.viewHistory
    // - git.viewLineHistory
    // - gitProjectManager.refreshFolder
    // - gitProjectManager.refreshProjects
    // - gitTreeCompare.changeBase
    // - gitTreeCompare.changeRepository
    // - gitTreeCompare.focus
    // - gitTreeCompare.openAllChanges
    // - gitTreeCompare.openChangedFiles
    // - gitTreeCompare.openChanges
    // - gitTreeCompare.openFile
    // - gitTreeCompare.refresh
    // - gitTreeCompare.removeView
    // - gitTreeCompare.resetViewLocation
    // - gitTreeCompare.switchToFullDiff
    // - gitTreeCompare.switchToMergeDiff
    // - gitTreeCompare.toggleVisibility
    // - github.provide-token
    // - github.publish
    // - gitignore.add
    // - gitlens.action.createPullRequest
    // - gitlens.action.hover.commands
    // - gitlens.action.openPullRequest
    // - gitlens.addAuthors
    // - gitlens.browseRepoAtRevision
    // - gitlens.browseRepoAtRevisionInNewWindow
    // - gitlens.browseRepoBeforeRevision
    // - gitlens.browseRepoBeforeRevisionInNewWindow
    // - gitlens.clearFileAnnotations
    // - gitlens.closeUnchangedFiles
    // - gitlens.closeUpdatesView
    // - gitlens.closeWelcomeView
    // - gitlens.compareHeadWith
    // - gitlens.compareWith
    // - gitlens.compareWorkingWith
    // - gitlens.computingFileAnnotations
    // - gitlens.connectRemoteProvider
    // - gitlens.copyCurrentBranch
    // - gitlens.copyMessageToClipboard
    // - gitlens.copyRemoteBranchUrl
    // - gitlens.copyRemoteBranchesUrl
    // - gitlens.copyRemoteCommitUrl
    // - gitlens.copyRemoteComparisonUrl
    // - gitlens.copyRemoteFileUrlFrom
    // - gitlens.copyRemoteFileUrlToClipboard
    // - gitlens.copyRemoteFileUrlWithoutRange
    // - gitlens.copyRemotePullRequestUrl
    // - gitlens.copyRemoteRepositoryUrl
    // - gitlens.copyShaToClipboard
    // - gitlens.createPullRequestOnRemote
    // - gitlens.diffDirectory
    // - gitlens.diffDirectoryWithHead
    // - gitlens.diffHeadWith
    // - gitlens.diffLineWithWorking
    // - gitlens.diffWith
    // - gitlens.diffWithRevision
    // - gitlens.diffWithRevisionFrom
    // - gitlens.diffWithWorkingInDiffLeft
    // - gitlens.diffWithWorkingInDiffRight
    // - gitlens.diffWorkingWith
    // - gitlens.disableDebugLogging
    // - gitlens.disableRebaseEditor
    // - gitlens.disconnectRemoteProvider
    // - gitlens.enableDebugLogging
    // - gitlens.enableRebaseEditor
    // - gitlens.externalDiff
    // - gitlens.externalDiffAll
    // - gitlens.fetchRepositories
    // - gitlens.gitCommands.branch
    // - gitlens.gitCommands.cherryPick
    // - gitlens.gitCommands.merge
    // - gitlens.gitCommands.rebase
    // - gitlens.gitCommands.reset
    // - gitlens.gitCommands.revert
    // - gitlens.gitCommands.switch
    // - gitlens.gitCommands.tag
    // - gitlens.inviteToLiveShare
    // - gitlens.openAssociatedPullRequestOnRemote
    // - gitlens.openBlamePriorToChange
    // - gitlens.openBranchInRemote
    // - gitlens.openBranchOnRemote
    // - gitlens.openBranchesInRemote
    // - gitlens.openBranchesOnRemote
    // - gitlens.openChangedFiles
    // - gitlens.openCommitInRemote
    // - gitlens.openCommitOnRemote
    // - gitlens.openComparisonOnRemote
    // - gitlens.openFileFromRemote
    // - gitlens.openFileHistory
    // - gitlens.openFileInRemote
    // - gitlens.openFileOnRemote
    // - gitlens.openFileOnRemoteFrom
    // - gitlens.openFileRevision
    // - gitlens.openFileRevisionFrom
    // - gitlens.openFolderHistory
    // - gitlens.openInRemote
    // - gitlens.openOnRemote
    // - gitlens.openPullRequestOnRemote
    // - gitlens.openRepoInRemote
    // - gitlens.openRepoOnRemote
    // - gitlens.openRevisionFile
    // - gitlens.openRevisionFileInDiffLeft
    // - gitlens.openRevisionFileInDiffRight
    // - gitlens.openWorkingFile
    // - gitlens.openWorkingFileInDiffLeft
    // - gitlens.openWorkingFileInDiffRight
    // - gitlens.pullRepositories
    // - gitlens.pushRepositories
    // - gitlens.quickOpenFileHistory
    // - gitlens.refreshHover
    // - gitlens.resetAvatarCache
    // - gitlens.resetSuppressedWarnings
    // - gitlens.revealCommitInView
    // - gitlens.setViewsLayout
    // - gitlens.showBranchesView
    // - gitlens.showCommitInView
    // - gitlens.showCommitSearch
    // - gitlens.showCommitsInView
    // - gitlens.showCommitsView
    // - gitlens.showContributorsView
    // - gitlens.showFileHistoryInView
    // - gitlens.showFileHistoryView
    // - gitlens.showLastQuickPick
    // - gitlens.showLineHistoryView
    // - gitlens.showQuickBranchHistory
    // - gitlens.showQuickCommitDetails
    // - gitlens.showQuickRevisionDetails
    // - gitlens.showQuickRevisionDetailsInDiffLeft
    // - gitlens.showQuickRevisionDetailsInDiffRight
    // - gitlens.showQuickStashList
    // - gitlens.showRemotesView
    // - gitlens.showRepositoriesView
    // - gitlens.showSearchAndCompareView
    // - gitlens.showSettingsPage
    // - gitlens.showSettingsPage#branches-view
    // - gitlens.showSettingsPage#commits-view
    // - gitlens.showSettingsPage#contributors-view
    // - gitlens.showSettingsPage#file-history-view
    // - gitlens.showSettingsPage#line-history-view
    // - gitlens.showSettingsPage#remotes-view
    // - gitlens.showSettingsPage#repositories-view
    // - gitlens.showSettingsPage#search-compare-view
    // - gitlens.showSettingsPage#stashes-view
    // - gitlens.showSettingsPage#tags-view
    // - gitlens.showSettingsPage#views
    // - gitlens.showStashesView
    // - gitlens.showTagsView
    // - gitlens.showWelcomePage
    // - gitlens.showWelcomeView
    // - gitlens.stashApply
    // - gitlens.stashSave
    // - gitlens.stashSaveFiles
    // - gitlens.supportGitLens
    // - gitlens.switchMode
    // - gitlens.toggleFileBlameInDiffLeft
    // - gitlens.toggleFileBlameInDiffRight
    // - gitlens.toggleFileChanges
    // - gitlens.toggleFileChangesOnly
    // - gitlens.toggleFileHeatmap
    // - gitlens.toggleFileHeatmapInDiffLeft
    // - gitlens.toggleFileHeatmapInDiffRight
    // - gitlens.toggleLineBlame
    // - gitlens.toggleReviewMode
    // - gitlens.toggleZenMode
    // - gitlens.views.addAuthor
    // - gitlens.views.addAuthors
    // - gitlens.views.addRemote
    // - gitlens.views.applyChanges
    // - gitlens.views.branches.focus
    // - gitlens.views.branches.refresh
    // - gitlens.views.branches.removeView
    // - gitlens.views.branches.resetViewLocation
    // - gitlens.views.branches.setFilesLayoutToAuto
    // - gitlens.views.branches.setFilesLayoutToList
    // - gitlens.views.branches.setFilesLayoutToTree
    // - gitlens.views.branches.setLayoutToList
    // - gitlens.views.branches.setLayoutToTree
    // - gitlens.views.branches.setShowAvatarsOff
    // - gitlens.views.branches.setShowAvatarsOn
    // - gitlens.views.branches.setShowBranchComparisonOff
    // - gitlens.views.branches.setShowBranchComparisonOn
    // - gitlens.views.branches.setShowBranchPullRequestOff
    // - gitlens.views.branches.setShowBranchPullRequestOn
    // - gitlens.views.branches.toggleVisibility
    // - gitlens.views.browseRepoAtRevision
    // - gitlens.views.browseRepoAtRevisionInNewWindow
    // - gitlens.views.browseRepoBeforeRevision
    // - gitlens.views.browseRepoBeforeRevisionInNewWindow
    // - gitlens.views.cherryPick
    // - gitlens.views.clearNode
    // - gitlens.views.closeRepository
    // - gitlens.views.commits.focus
    // - gitlens.views.commits.refresh
    // - gitlens.views.commits.removeView
    // - gitlens.views.commits.resetViewLocation
    // - gitlens.views.commits.setFilesLayoutToAuto
    // - gitlens.views.commits.setFilesLayoutToList
    // - gitlens.views.commits.setFilesLayoutToTree
    // - gitlens.views.commits.setMyCommitsOnlyOff
    // - gitlens.views.commits.setMyCommitsOnlyOn
    // - gitlens.views.commits.setShowAvatarsOff
    // - gitlens.views.commits.setShowAvatarsOn
    // - gitlens.views.commits.setShowBranchComparisonOff
    // - gitlens.views.commits.setShowBranchComparisonOn
    // - gitlens.views.commits.setShowBranchPullRequestOff
    // - gitlens.views.commits.setShowBranchPullRequestOn
    // - gitlens.views.commits.toggleVisibility
    // - gitlens.views.compareAncestryWithWorking
    // - gitlens.views.compareFileWithSelected
    // - gitlens.views.compareWithHead
    // - gitlens.views.compareWithSelected
    // - gitlens.views.compareWithUpstream
    // - gitlens.views.compareWithWorking
    // - gitlens.views.contributors.focus
    // - gitlens.views.contributors.refresh
    // - gitlens.views.contributors.removeView
    // - gitlens.views.contributors.resetViewLocation
    // - gitlens.views.contributors.setFilesLayoutToAuto
    // - gitlens.views.contributors.setFilesLayoutToList
    // - gitlens.views.contributors.setFilesLayoutToTree
    // - gitlens.views.contributors.setShowAllBranchesOff
    // - gitlens.views.contributors.setShowAllBranchesOn
    // - gitlens.views.contributors.setShowAvatarsOff
    // - gitlens.views.contributors.setShowAvatarsOn
    // - gitlens.views.contributors.toggleVisibility
    // - gitlens.views.copy
    // - gitlens.views.createBranch
    // - gitlens.views.createPullRequest
    // - gitlens.views.createTag
    // - gitlens.views.deleteBranch
    // - gitlens.views.deleteStash
    // - gitlens.views.deleteTag
    // - gitlens.views.dismissNode
    // - gitlens.views.editNode
    // - gitlens.views.expandNode
    // - gitlens.views.fetch
    // - gitlens.views.fileHistory.changeBase
    // - gitlens.views.fileHistory.focus
    // - gitlens.views.fileHistory.refresh
    // - gitlens.views.fileHistory.removeView
    // - gitlens.views.fileHistory.resetViewLocation
    // - gitlens.views.fileHistory.setCursorFollowingOff
    // - gitlens.views.fileHistory.setCursorFollowingOn
    // - gitlens.views.fileHistory.setEditorFollowingOff
    // - gitlens.views.fileHistory.setEditorFollowingOn
    // - gitlens.views.fileHistory.setRenameFollowingOff
    // - gitlens.views.fileHistory.setRenameFollowingOn
    // - gitlens.views.fileHistory.setShowAllBranchesOff
    // - gitlens.views.fileHistory.setShowAllBranchesOn
    // - gitlens.views.fileHistory.setShowAvatarsOff
    // - gitlens.views.fileHistory.setShowAvatarsOn
    // - gitlens.views.fileHistory.toggleVisibility
    // - gitlens.views.highlightChanges
    // - gitlens.views.highlightRevisionChanges
    // - gitlens.views.lineHistory.changeBase
    // - gitlens.views.lineHistory.focus
    // - gitlens.views.lineHistory.refresh
    // - gitlens.views.lineHistory.removeView
    // - gitlens.views.lineHistory.resetViewLocation
    // - gitlens.views.lineHistory.setEditorFollowingOff
    // - gitlens.views.lineHistory.setEditorFollowingOn
    // - gitlens.views.lineHistory.setShowAvatarsOff
    // - gitlens.views.lineHistory.setShowAvatarsOn
    // - gitlens.views.lineHistory.toggleVisibility
    // - gitlens.views.loadAllChildren
    // - gitlens.views.loadMoreChildren
    // - gitlens.views.mergeBranchInto
    // - gitlens.views.openChangedFileDiffs
    // - gitlens.views.openChangedFileDiffsWithWorking
    // - gitlens.views.openChangedFileRevisions
    // - gitlens.views.openChangedFiles
    // - gitlens.views.openChanges
    // - gitlens.views.openChangesWithWorking
    // - gitlens.views.openDirectoryDiff
    // - gitlens.views.openDirectoryDiffWithWorking
    // - gitlens.views.openFile
    // - gitlens.views.openFileRevision
    // - gitlens.views.openInTerminal
    // - gitlens.views.openPullRequest
    // - gitlens.views.pruneRemote
    // - gitlens.views.publishBranch
    // - gitlens.views.publishRepository
    // - gitlens.views.pull
    // - gitlens.views.push
    // - gitlens.views.pushToCommit
    // - gitlens.views.pushWithForce
    // - gitlens.views.rebaseOntoBranch
    // - gitlens.views.rebaseOntoCommit
    // - gitlens.views.rebaseOntoUpstream
    // - gitlens.views.refreshNode
    // - gitlens.views.remotes.focus
    // - gitlens.views.remotes.refresh
    // - gitlens.views.remotes.removeView
    // - gitlens.views.remotes.resetViewLocation
    // - gitlens.views.remotes.setFilesLayoutToAuto
    // - gitlens.views.remotes.setFilesLayoutToList
    // - gitlens.views.remotes.setFilesLayoutToTree
    // - gitlens.views.remotes.setLayoutToList
    // - gitlens.views.remotes.setLayoutToTree
    // - gitlens.views.remotes.setShowAvatarsOff
    // - gitlens.views.remotes.setShowAvatarsOn
    // - gitlens.views.remotes.setShowBranchPullRequestOff
    // - gitlens.views.remotes.setShowBranchPullRequestOn
    // - gitlens.views.remotes.toggleVisibility
    // - gitlens.views.renameBranch
    // - gitlens.views.repositories.focus
    // - gitlens.views.repositories.refresh
    // - gitlens.views.repositories.removeView
    // - gitlens.views.repositories.resetViewLocation
    // - gitlens.views.repositories.setAutoRefreshToOff
    // - gitlens.views.repositories.setAutoRefreshToOn
    // - gitlens.views.repositories.setBranchesLayoutToList
    // - gitlens.views.repositories.setBranchesLayoutToTree
    // - gitlens.views.repositories.setBranchesShowBranchComparisonOff
    // - gitlens.views.repositories.setBranchesShowBranchComparisonOn
    // - gitlens.views.repositories.setFilesLayoutToAuto
    // - gitlens.views.repositories.setFilesLayoutToList
    // - gitlens.views.repositories.setFilesLayoutToTree
    // - gitlens.views.repositories.setShowAvatarsOff
    // - gitlens.views.repositories.setShowAvatarsOn
    // - gitlens.views.repositories.setShowBranchComparisonOff
    // - gitlens.views.repositories.setShowBranchComparisonOn
    // - gitlens.views.repositories.setShowBranchesOff
    // - gitlens.views.repositories.setShowBranchesOn
    // - gitlens.views.repositories.setShowCommitsOff
    // - gitlens.views.repositories.setShowCommitsOn
    // - gitlens.views.repositories.setShowContributorsOff
    // - gitlens.views.repositories.setShowContributorsOn
    // - gitlens.views.repositories.setShowRemotesOff
    // - gitlens.views.repositories.setShowRemotesOn
    // - gitlens.views.repositories.setShowSectionOff
    // - gitlens.views.repositories.setShowStashesOff
    // - gitlens.views.repositories.setShowStashesOn
    // - gitlens.views.repositories.setShowTagsOff
    // - gitlens.views.repositories.setShowTagsOn
    // - gitlens.views.repositories.setShowUpstreamStatusOff
    // - gitlens.views.repositories.setShowUpstreamStatusOn
    // - gitlens.views.repositories.toggleVisibility
    // - gitlens.views.resetCommit
    // - gitlens.views.resetToCommit
    // - gitlens.views.restore
    // - gitlens.views.revert
    // - gitlens.views.searchAndCompare.clear
    // - gitlens.views.searchAndCompare.compareWithSelected
    // - gitlens.views.searchAndCompare.focus
    // - gitlens.views.searchAndCompare.pin
    // - gitlens.views.searchAndCompare.refresh
    // - gitlens.views.searchAndCompare.removeView
    // - gitlens.views.searchAndCompare.resetViewLocation
    // - gitlens.views.searchAndCompare.searchCommits
    // - gitlens.views.searchAndCompare.selectForCompare
    // - gitlens.views.searchAndCompare.setFilesLayoutToAuto
    // - gitlens.views.searchAndCompare.setFilesLayoutToList
    // - gitlens.views.searchAndCompare.setFilesLayoutToTree
    // - gitlens.views.searchAndCompare.setKeepResultsToOff
    // - gitlens.views.searchAndCompare.setKeepResultsToOn
    // - gitlens.views.searchAndCompare.setShowAvatarsOff
    // - gitlens.views.searchAndCompare.setShowAvatarsOn
    // - gitlens.views.searchAndCompare.swapComparison
    // - gitlens.views.searchAndCompare.toggleVisibility
    // - gitlens.views.searchAndCompare.unpin
    // - gitlens.views.selectFileForCompare
    // - gitlens.views.selectForCompare
    // - gitlens.views.setAsDefault
    // - gitlens.views.setBranchComparisonToBranch
    // - gitlens.views.setBranchComparisonToWorking
    // - gitlens.views.setShowRelativeDateMarkersOff
    // - gitlens.views.setShowRelativeDateMarkersOn
    // - gitlens.views.stageDirectory
    // - gitlens.views.stageFile
    // - gitlens.views.star
    // - gitlens.views.stashes.focus
    // - gitlens.views.stashes.refresh
    // - gitlens.views.stashes.removeView
    // - gitlens.views.stashes.resetViewLocation
    // - gitlens.views.stashes.setFilesLayoutToAuto
    // - gitlens.views.stashes.setFilesLayoutToList
    // - gitlens.views.stashes.setFilesLayoutToTree
    // - gitlens.views.stashes.toggleVisibility
    // - gitlens.views.switchToAnotherBranch
    // - gitlens.views.switchToBranch
    // - gitlens.views.switchToCommit
    // - gitlens.views.switchToTag
    // - gitlens.views.tags.focus
    // - gitlens.views.tags.refresh
    // - gitlens.views.tags.removeView
    // - gitlens.views.tags.resetViewLocation
    // - gitlens.views.tags.setFilesLayoutToAuto
    // - gitlens.views.tags.setFilesLayoutToList
    // - gitlens.views.tags.setFilesLayoutToTree
    // - gitlens.views.tags.setLayoutToList
    // - gitlens.views.tags.setLayoutToTree
    // - gitlens.views.tags.setShowAvatarsOff
    // - gitlens.views.tags.setShowAvatarsOn
    // - gitlens.views.tags.toggleVisibility
    // - gitlens.views.terminalRemoveRemote
    // - gitlens.views.undoCommit
    // - gitlens.views.unsetAsDefault
    // - gitlens.views.unstageDirectory
    // - gitlens.views.unstageFile
    // - gitlens.views.unstar
    // - gitlens.views.updates.focus
    // - gitlens.views.updates.resetViewLocation
    // - gitlens.views.welcome.focus
    // - gitlens.views.welcome.resetViewLocation
    // - gl.cancelEditingComment
    // - gl.compareCurrentBranch
    // - gl.copyLinkToActiveFile
    // - gl.createComment
    // - gl.createSnippet
    // - gl.deleteComment
    // - gl.insertSnippet
    // - gl.issueSearch
    // - gl.mergeRequestSearch
    // - gl.noImageReview
    // - gl.openActiveFile
    // - gl.openCreateNewIssue
    // - gl.openCreateNewMR
    // - gl.openCurrentMergeRequest
    // - gl.openCurrentPipeline
    // - gl.openProjectPage
    // - gl.pipelineActions
    // - gl.projectAdvancedSearch
    // - gl.refreshSidebar
    // - gl.removeToken
    // - gl.resolveThread
    // - gl.setToken
    // - gl.showIssuesAssignedToMe
    // - gl.showMergeRequestsAssignedToMe
    // - gl.showOutput
    // - gl.showRichContent
    // - gl.startEditingComment
    // - gl.submitCommentEdit
    // - gl.unresolveThread
    // - gl.validateCIConfig
    // - globalCommandExecuter.execute
    // - globalCommandExplorer.add
    // - globalCommandExplorer.addFolder
    // - globalCommandExplorer.delete
    // - globalCommandExplorer.edit
    // - globalCommandExplorer.focus
    // - globalCommandExplorer.openFile
    // - globalCommandExplorer.removeView
    // - globalCommandExplorer.resetViewLocation
    // - globalCommandExplorer.sync
    // - globalCommandExplorer.toggleVisibility
    // - goToNextReferenceFromEmbeddedEditor
    // - goToPreviousReferenceFromEmbeddedEditor
    // - help.tweetFeedback
    // - html-css-class-completion.cache
    // - imagePreview.zoomIn
    // - imagePreview.zoomOut
    // - importCost.toggle
    // - issuesAndMrs.focus
    // - issuesAndMrs.removeView
    // - issuesAndMrs.resetViewLocation
    // - issuesAndMrs.toggleVisibility
    // - javascript.goToProjectConfig
    // - javascript.reloadProjects
    // - jsBrowserBreakpoints.focus
    // - jsBrowserBreakpoints.resetViewLocation
    // - jupyter.addcellbelow
    // - jupyter.clearSavedJupyterUris
    // - jupyter.collapseallcells
    // - jupyter.createGitHubIssue
    // - jupyter.createnewinteractive
    // - jupyter.createnewnotebook
    // - jupyter.debugFileInteractive
    // - jupyter.debugcell
    // - jupyter.debugcontinue
    // - jupyter.debugcurrentcell.palette
    // - jupyter.debugstepover
    // - jupyter.debugstop
    // - jupyter.enableDebugLogging
    // - jupyter.enableLoadingWidgetScriptsFromThirdPartySource
    // - jupyter.expandallcells
    // - jupyter.export
    // - jupyter.exportAsPythonScript
    // - jupyter.exportToHTML
    // - jupyter.exportToPDF
    // - jupyter.exportfileandoutputasnotebook
    // - jupyter.exportfileasnotebook
    // - jupyter.exportoutputasnotebook
    // - jupyter.importnotebook
    // - jupyter.importnotebookfile
    // - jupyter.interruptkernel
    // - jupyter.latestExtension
    // - jupyter.notebookeditor.addcellbelow
    // - jupyter.notebookeditor.collapseallcells
    // - jupyter.notebookeditor.expandallcells
    // - jupyter.notebookeditor.export
    // - jupyter.notebookeditor.interruptkernel
    // - jupyter.notebookeditor.redocells
    // - jupyter.notebookeditor.removeallcells
    // - jupyter.notebookeditor.restartkernel
    // - jupyter.notebookeditor.runallcells
    // - jupyter.notebookeditor.runallcellsabove
    // - jupyter.notebookeditor.runcellandallbelow
    // - jupyter.notebookeditor.trust
    // - jupyter.notebookeditor.trusted
    // - jupyter.notebookeditor.undocells
    // - jupyter.openVariableView
    // - jupyter.opennotebook
    // - jupyter.opennotebookInPreviewEditor
    // - jupyter.redocells
    // - jupyter.reloadVSCode
    // - jupyter.removeallcells
    // - jupyter.resetLoggingLevel
    // - jupyter.restartkernel
    // - jupyter.runFileInteractive
    // - jupyter.runallcells
    // - jupyter.runallcellsabove
    // - jupyter.runallcellsabove.palette
    // - jupyter.runcell
    // - jupyter.runcellandallbelow
    // - jupyter.runcurrentcellandallbelow.palette
    // - jupyter.runfromline
    // - jupyter.runtoline
    // - jupyter.scrolltocell
    // - jupyter.selectCellContents
    // - jupyter.selectJupyterInterpreter
    // - jupyter.selectNativeJupyterUriFromToolBar
    // - jupyter.selectjupytercommandline
    // - jupyter.selectjupyteruri
    // - jupyter.setKernel
    // - jupyter.showDataViewer
    // - jupyter.submitGitHubIssue
    // - jupyter.switchKernel
    // - jupyter.undocells
    // - jupyter.viewOutput
    // - jupyterViewVariables.focus
    // - jupyterViewVariables.resetViewLocation
    // - keybindings.editor.copyCommandKeybindingEntry
    // - keybindings.editor.resetKeybinding
    // - keybindings.editor.showConflicts
    // - keybindings.editor.showDefaultKeybindings
    // - keybindings.editor.showExtensionKeybindings
    // - keybindings.editor.showUserKeybindings
    // - kite.copilot-docs-from-position
    // - kite.def
    // - kite.docs-at-cursor
    // - kite.go-tutorial
    // - kite.help
    // - kite.insert-completion
    // - kite.javascript-tutorial
    // - kite.login
    // - kite.open-copilot
    // - kite.open-settings
    // - kite.python-tutorial
    // - kite.related-code-from-file
    // - kite.related-code-from-line
    // - kite.usage
    // - kite.web-url
    // - lastCursorLineSelect
    // - lastCursorLineSelectDrag
    // - lastCursorWordSelect
    // - latex-commands.focus
    // - latex-commands.resetViewLocation
    // - latex-snippet-view.focus
    // - latex-snippet-view.resetViewLocation
    // - latex-structure.focus
    // - latex-structure.resetViewLocation
    // - latex-structure.toggle-follow-cursor
    // - latex-workshop-dev.parsebib
    // - latex-workshop-dev.parselog
    // - latex-workshop-dev.parsetex
    // - latex-workshop.actions
    // - latex-workshop.addtexroot
    // - latex-workshop.bibalign
    // - latex-workshop.bibalignsort
    // - latex-workshop.bibsort
    // - latex-workshop.citation
    // - latex-workshop.close-env
    // - latex-workshop.closeMathPreviewPanel
    // - latex-workshop.compilerlog
    // - latex-workshop.kill
    // - latex-workshop.log
    // - latex-workshop.multicursor-envname
    // - latex-workshop.navigate-envpair
    // - latex-workshop.openMathPreviewPanel
    // - latex-workshop.recipes
    // - latex-workshop.refresh-viewer
    // - latex-workshop.saveWithoutBuilding
    // - latex-workshop.select-envcontent
    // - latex-workshop.select-envname
    // - latex-workshop.select-section
    // - latex-workshop.setViewer
    // - latex-workshop.showSnippetPanel
    // - latex-workshop.tab
    // - latex-workshop.texdoc
    // - latex-workshop.texdocUsepackages
    // - latex-workshop.toggle-equation-envname
    // - latex-workshop.viewExternal
    // - latex-workshop.viewInBrowser
    // - latex-workshop.wordcount
    // - latex-workshop.wrap-env
    // - layoutEditorGroups
    // - list.focusParent
    // - list.scrollLeft
    // - list.scrollRight
    // - list.selectAndPreserveFocus
    // - list.toggleFilterOnType
    // - list.toggleKeyboardNavigation
    // - liveshare.activityBar.copyServerURL
    // - liveshare.activityBar.makeTerminalReadOnly
    // - liveshare.activityBar.makeTerminalReadWrite
    // - liveshare.activityBar.openServerInBrowser
    // - liveshare.activityBar.openTerminal
    // - liveshare.activityBar.removeTerminal
    // - liveshare.activityBar.shareServer
    // - liveshare.activityBar.shareTerminal
    // - liveshare.activityBar.unshareServer
    // - liveshare.activityBar.user.decrease
    // - liveshare.activityBar.user.elevate
    // - liveshare.changePresenceAvailable
    // - liveshare.changePresenceAway
    // - liveshare.changePresenceBusy
    // - liveshare.changePresenceDoNotDisturb
    // - liveshare.changePresenceInvisible
    // - liveshare.changePresenter
    // - liveshare.changeSelfPresenceFromAvailable
    // - liveshare.changeSelfPresenceFromAway
    // - liveshare.changeSelfPresenceFromBusy
    // - liveshare.changeSelfPresenceFromDoNotDisturb
    // - liveshare.chatSelectWindow
    // - liveshare.chatWithContact
    // - liveshare.codelens.start
    // - liveshare.collaboration.link.copy
    // - liveshare.collaboration.link.copyFromActivityBar
    // - liveshare.collaboration.link.copyFromFileTreeExplorer
    // - liveshare.comments.cancelEditComment
    // - liveshare.comments.createThread
    // - liveshare.comments.deleteComment
    // - liveshare.comments.deleteThread
    // - liveshare.comments.editComment
    // - liveshare.comments.reply
    // - liveshare.comments.saveComment
    // - liveshare.configureSettings
    // - liveshare.contacts.focus
    // - liveshare.contacts.removeView
    // - liveshare.contacts.resetViewLocation
    // - liveshare.contacts.toggleVisibility
    // - liveshare.copyPlannedSessionLink
    // - liveshare.createInvitationLink
    // - liveshare.createPlannedSession
    // - liveshare.createPlannedSessionFromActivityBar
    // - liveshare.createPlannedSessionFromFileTreeExplorer
    // - liveshare.createSession
    // - liveshare.debug
    // - liveshare.deletePlannedSession
    // - liveshare.deletePlannedSessionFromFileTreeExplorer
    // - liveshare.disable.vscode-account.auth
    // - liveshare.enable.vscode-account.auth
    // - liveshare.end
    // - liveshare.endFromActivityBar
    // - liveshare.endFromFileTreeExplorer
    // - liveshare.exportLogs
    // - liveshare.fileTreeExplorer.copyServerURL
    // - liveshare.fileTreeExplorer.makeTerminalReadOnly
    // - liveshare.fileTreeExplorer.makeTerminalReadWrite
    // - liveshare.fileTreeExplorer.openServerInBrowser
    // - liveshare.fileTreeExplorer.openTerminal
    // - liveshare.fileTreeExplorer.removeTerminal
    // - liveshare.fileTreeExplorer.shareServer
    // - liveshare.fileTreeExplorer.shareTerminal
    // - liveshare.fileTreeExplorer.unshareServer
    // - liveshare.fileTreeExplorer.user.decrease
    // - liveshare.fileTreeExplorer.user.elevate
    // - liveshare.focusParticipants
    // - liveshare.focusParticipantsFromActivityBar
    // - liveshare.focusParticipantsFromFileTreeExplorer
    // - liveshare.followFromActivityBar
    // - liveshare.followFromFileTreeExplorer
    // - liveshare.followToTheSideFromActivityBar
    // - liveshare.followToTheSideFromTreeExplorer
    // - liveshare.getCoeditingInformation
    // - liveshare.help
    // - liveshare.help.focus
    // - liveshare.help.resetViewLocation
    // - liveshare.installRecovery
    // - liveshare.inviteAvailableContacts
    // - liveshare.inviteNoUserJoinByEmail
    // - liveshare.inviteSearchContacts
    // - liveshare.inviteUserJoin
    // - liveshare.inviteUserJoinByEmail
    // - liveshare.join.postReload
    // - liveshare.joinFromActivityBar
    // - liveshare.joinFromFileTreeExplorer
    // - liveshare.joinFromWelcomeContent
    // - liveshare.joinPlannedSession
    // - liveshare.joinSession
    // - liveshare.launcherSetup
    // - liveshare.leave
    // - liveshare.leaveFromActivityBar
    // - liveshare.leaveFromFileTreeExplorer
    // - liveshare.listParticipants
    // - liveshare.listPlannedSessions
    // - liveshare.listServers
    // - liveshare.listTerminals
    // - liveshare.memento.resetValues
    // - liveshare.memento.showCurrentValues
    // - liveshare.moreInfo
    // - liveshare.openLink
    // - liveshare.plannedSessions.focus
    // - liveshare.plannedSessions.resetViewLocation
    // - liveshare.provideFeedback
    // - liveshare.reloadSettingsFile
    // - liveshare.removeInvitedContactFromActivityBar
    // - liveshare.removeInvitedContactFromFileTreeExplorer
    // - liveshare.removeParticipant
    // - liveshare.removeParticipantFromActivityBar
    // - liveshare.removeParticipantFromFileTreeExplorer
    // - liveshare.removeRecentContact
    // - liveshare.renamePlannedSession
    // - liveshare.reportAProblem
    // - liveshare.resetLanguageServices
    // - liveshare.scc.clean
    // - liveshare.scc.cleanAll
    // - liveshare.scc.openChange
    // - liveshare.scc.openFile
    // - liveshare.scc.openFile2
    // - liveshare.scc.revertChange
    // - liveshare.selectPresenceProvider
    // - liveshare.session.explorer.focus
    // - liveshare.session.explorer.resetViewLocation
    // - liveshare.session.focus
    // - liveshare.session.removeView
    // - liveshare.session.resetViewLocation
    // - liveshare.session.toggleVisibility
    // - liveshare.shareServer
    // - liveshare.shareTerminal
    // - liveshare.signInAndReload
    // - liveshare.signInPresence
    // - liveshare.signOutPresence
    // - liveshare.signin
    // - liveshare.signin.browser
    // - liveshare.signin.token
    // - liveshare.signout
    // - liveshare.start
    // - liveshare.startFromActivityBar
    // - liveshare.startFromFileTreeExplorer
    // - liveshare.startFromWelcomeContent
    // - liveshare.startFromWelcomePage
    // - liveshare.startOrJoinCall
    // - liveshare.startPresentation
    // - liveshare.startReadOnly
    // - liveshare.startReadOnlyFromActivityBar
    // - liveshare.startReadOnlyFromFileTreeExplorer
    // - liveshare.startReadOnlyFromWelcomeContent
    // - liveshare.unfollowFromActivityBar
    // - liveshare.unfollowFromFileTreeExplorer
    // - liveshare.unshareServer
    // - markdown.preview.refresh
    // - markdown.preview.toggleLock
    // - markdown.showLockedPreviewToSide
    // - markdown.showPreviewSecuritySelector
    // - markdown.showSource
    // - markdownlint.fixAll
    // - markdownlint.openConfigFile
    // - markdownlint.toggleLinting
    // - md-shortcut.addTable
    // - md-shortcut.addTableWithHeader
    // - md-shortcut.toggleCitations
    // - md-shortcut.toggleStrikethrough
    // - md-shortcut.toggleTitleH1
    // - md-shortcut.toggleTitleH2
    // - md-shortcut.toggleTitleH3
    // - md-shortcut.toggleTitleH4
    // - md-shortcut.toggleTitleH5
    // - md-shortcut.toggleTitleH6
    // - merge-conflict.accept.all-both
    // - merge-conflict.accept.all-current
    // - merge-conflict.accept.all-incoming
    // - merge-conflict.accept.both
    // - merge-conflict.accept.current
    // - merge-conflict.accept.incoming
    // - merge-conflict.accept.selection
    // - merge-conflict.compare
    // - merge-conflict.next
    // - merge-conflict.previous
    // - navigateToTestFile
    // - navigateToTestFunction
    // - navigateToTestSuite
    // - noop
    // - notebook.cancelExecution
    // - notebook.cell.cancelExecution
    // - notebook.cell.changeLanguage
    // - notebook.cell.insertCodeCellAtTop
    // - notebook.cell.insertMarkdownCellAbove
    // - notebook.cell.insertMarkdownCellAtTop
    // - notebook.cell.insertMarkdownCellBelow
    // - notebook.cell.toggleLineNumbers
    // - notebook.clearAllCellsOutputs
    // - notebook.diff.cell.revertInput
    // - notebook.diff.cell.revertMetadata
    // - notebook.diff.cell.revertOutputs
    // - notebook.diff.cell.switchOutputRenderingStyleToText
    // - notebook.diff.showMetadata
    // - notebook.diff.showOutputs
    // - notebook.diff.switchToText
    // - notebook.execute
    // - notebook.inspectLayout
    // - notebook.renderAllMarkdownCells
    // - notebook.selectKernel
    // - notebook.toggleCellToolbarPosition
    // - notebook.toggleLayoutTroubleshoot
    // - notebook.toggleLineNumbers
    // - notebook.trust
    // - notifications.clearAll
    // - notifications.focusToasts
    // - notifications.showList
    // - notifications.toggleList
    // - npm-intellisense.import
    // - npm-script.audit
    // - npm-script.build
    // - npm-script.init
    // - npm-script.install
    // - npm-script.installInOutputWindow
    // - npm-script.outdated
    // - npm-script.start
    // - npm-script.uninstallInOutputWindow
    // - npm-script.validate
    // - npm.debugScript
    // - npm.debugScriptFromHover
    // - npm.focus
    // - npm.openScript
    // - npm.packageManager
    // - npm.refresh
    // - npm.resetViewLocation
    // - npm.runInstall
    // - npm.runScript
    // - npm.runScriptFromFolder
    // - npm.runScriptFromHover
    // - npm.runSelectedScript
    // - openEditors.closeAll
    // - openEditors.newUntitledFile
    // - openInTerminal
    // - openReference
    // - openZipResource
    // - opensshremotes.addNewSshHost
    // - opensshremotes.cleanDevBox
    // - opensshremotes.cleanLocalServer
    // - opensshremotes.cleanRemoteServer
    // - opensshremotes.getHelp
    // - opensshremotes.getStarted
    // - opensshremotes.openConfigFile
    // - opensshremotes.openEmptyWindow
    // - opensshremotes.openEmptyWindowInCurrentWindow
    // - opensshremotes.openEmptyWindowOnCurrentHost
    // - opensshremotes.openWebUI
    // - opensshremotes.provideFeedback
    // - opensshremotes.reportIssue
    // - opensshremotes.settings
    // - opensshremotes.showLog
    // - opensshremotesexplorer.add
    // - opensshremotesexplorer.configure
    // - opensshremotesexplorer.deleteFolderHistoryItem
    // - opensshremotesexplorer.emptyWindowInCurrentWindow
    // - opensshremotesexplorer.emptyWindowInNewWindow
    // - opensshremotesexplorer.refresh
    // - opensshremotesexplorer.reopenFolderInCurrentWindow
    // - opensshremotesexplorer.reopenFolderInNewWindow
    // - opensshremotesexplorer.startManagedHost
    // - opensshremotesexplorer.stopManagedHost
    // - outline.collapse
    // - outline.filterOnType
    // - outline.focus
    // - outline.followCursor
    // - outline.removeView
    // - outline.resetViewLocation
    // - outline.sortByKind
    // - outline.sortByName
    // - outline.sortByPosition
    // - outline.toggleVisibility
    // - paste
    // - perfview.show
    // - php.untrustValidationExecutable
    // - prettier.createConfigFile
    // - prettier.forceFormatDocument
    // - prettier.openOutput
    // - prettier.resetModuleExecutionState
    // - previewHtml
    // - problems.action.clearFilterText
    // - problems.action.copyMessage
    // - problems.action.copyRelatedInformationMessage
    // - problems.action.showMultilineMessage
    // - problems.action.showSinglelineMessage
    // - projectManager.addToFavorites
    // - projectManager.addToWorkspace
    // - projectManager.addToWorkspace#sideBar
    // - projectManager.editProjects
    // - projectManager.hideGitWelcome
    // - projectManager.listProjectsNewWindow
    // - projectManager.openSettings#sideBarAny
    // - projectManager.openSettings#sideBarFavorites
    // - projectManager.openSettings#sideBarGit
    // - projectManager.openSettings#sideBarMercurial
    // - projectManager.openSettings#sideBarSVN
    // - projectManager.openSettings#sideBarVSCode
    // - projectManager.refreshAnyProjects
    // - projectManager.refreshGitProjects
    // - projectManager.refreshMercurialProjects
    // - projectManager.refreshProjects
    // - projectManager.refreshSVNProjects
    // - projectManager.refreshVSCodeProjects
    // - projectManager.saveProject
    // - projectManager.showGitWelcome
    // - projectManager.supportProjectManager
    // - projectManager.whatsNew
    // - projectManagerHelpAndFeedback.focus
    // - projectManagerHelpAndFeedback.openHelpLink
    // - projectManagerHelpAndFeedback.removeView
    // - projectManagerHelpAndFeedback.resetViewLocation
    // - projectManagerHelpAndFeedback.toggleVisibility
    // - projectsExplorerAny.focus
    // - projectsExplorerAny.resetViewLocation
    // - projectsExplorerFavorites.focus
    // - projectsExplorerFavorites.removeView
    // - projectsExplorerFavorites.resetViewLocation
    // - projectsExplorerFavorites.toggleVisibility
    // - projectsExplorerGit.focus
    // - projectsExplorerGit.removeView
    // - projectsExplorerGit.resetViewLocation
    // - projectsExplorerGit.toggleVisibility
    // - projectsExplorerMercurial.focus
    // - projectsExplorerMercurial.resetViewLocation
    // - projectsExplorerSVN.focus
    // - projectsExplorerSVN.resetViewLocation
    // - projectsExplorerVSCode.focus
    // - projectsExplorerVSCode.resetViewLocation
    // - pylance.completionAccepted
    // - pylance.dumpFileDebugInfo
    // - pylance.extractMethod
    // - pylance.extractVariable
    // - pylance.reportIssue
    // - pylance.runCommands
    // - pylance.triggerParameterHints
    // - pyright.addoptionalforparam
    // - pyright.createtypestub
    // - pyright.organizeimports
    // - python.SelectAndInsertDebugConfiguration
    // - python._loadLanguageServerExtension
    // - python.addImport
    // - python.addOptionalForParam
    // - python.analysis.clearCache
    // - python.analysis.restartLanguageServer
    // - python.askToStopTestDiscovery
    // - python.askToStopTests
    // - python.buildWorkspaceSymbols
    // - python.clearPersistentStorage
    // - python.clearWorkspaceInterpreter
    // - python.configureTests
    // - python.createTerminal
    // - python.createTypeStub
    // - python.debugTestNode
    // - python.debugtests
    // - python.discoverTests
    // - python.discoveringTests
    // - python.enableLinting
    // - python.enableSourceMapSupport
    // - python.execInTerminal
    // - python.execInTerminal-icon
    // - python.execSelectionInDjangoShell
    // - python.goToPythonObject
    // - python.intellicode.completionItemSelected
    // - python.intellicode.loadLanguageServerExtension
    // - python.interpreterPath
    // - python.launchTensorBoard
    // - python.openTestNodeInEditor
    // - python.orderImports
    // - python.pickLocalProcess
    // - python.refactorExtractMethod
    // - python.refactorExtractVariable
    // - python.reloadVSCode
    // - python.removeUnusedImport
    // - python.reportIssue
    // - python.resetInterpreterSecurityStorage
    // - python.revealTestItem
    // - python.runCurrentTestFile
    // - python.runFailedTests
    // - python.runLinting
    // - python.runParametrizedTests
    // - python.runTestNode
    // - python.runtests
    // - python.selectAndDebugTestMethod
    // - python.selectAndRunTestFile
    // - python.selectAndRunTestMethod
    // - python.selectTestToDebug
    // - python.selectTestToRun
    // - python.setInterpreter
    // - python.setLinter
    // - python.setShebangInterpreter
    // - python.sortImports
    // - python.startPage.open
    // - python.startREPL
    // - python.stopTests
    // - python.switchOffInsidersChannel
    // - python.switchToDailyChannel
    // - python.switchToWeeklyChannel
    // - python.viewLanguageServerOutput
    // - python.viewOutput
    // - python.viewTestOutput
    // - python.viewTestUI
    // - python_tests.focus
    // - python_tests.resetViewLocation
    // - refactorPreview
    // - refactorPreview.discard
    // - refactorPreview.focus
    // - refactorPreview.groupByFile
    // - refactorPreview.groupByType
    // - refactorPreview.resetViewContainerLocation
    // - refactorPreview.resetViewLocation
    // - refactorPreview.toggleGrouping
    // - references-view.clear
    // - references-view.clearHistory
    // - references-view.copy
    // - references-view.copyAll
    // - references-view.copyPath
    // - references-view.findImplementations
    // - references-view.pickFromHistory
    // - references-view.refind
    // - references-view.refresh
    // - references-view.removeCallItem
    // - references-view.removeReferenceItem
    // - references-view.showIncomingCalls
    // - references-view.showOutgoingCalls
    // - references-view.tree.focus
    // - references-view.tree.resetViewLocation
    // - remote-containers.addExtensionToConfig
    // - remote-containers.attachToContainer
    // - remote-containers.attachToContainerNewWindow
    // - remote-containers.attachToK8sContainerFromViewlet
    // - remote-containers.attachToRunningContainer
    // - remote-containers.attachToRunningContainerFromViewlet
    // - remote-containers.checkoutPRInVolume
    // - remote-containers.cloneInVolume
    // - remote-containers.cloneInVolumeFromViewlet
    // - remote-containers.cloneRepositoryInVolumeFromViewlet
    // - remote-containers.createDevContainerFile
    // - remote-containers.explorerDetailsRefresh
    // - remote-containers.explorerTargetsRefresh
    // - remote-containers.explorerVolumesRefresh
    // - remote-containers.getHelp
    // - remote-containers.getStarted
    // - remote-containers.inspectDockerResource
    // - remote-containers.inspectInBasicDevContainer
    // - remote-containers.inspectVolume
    // - remote-containers.inspectVolumeFromViewlet
    // - remote-containers.installDocker
    // - remote-containers.labelPortAndUpdateConfig
    // - remote-containers.newContainer
    // - remote-containers.openAttachConfigByNameFile
    // - remote-containers.openAttachDevContainerFile
    // - remote-containers.openDevContainerFile
    // - remote-containers.openFolder
    // - remote-containers.openLastLogFile
    // - remote-containers.openLogFile
    // - remote-containers.openPullRequestInVolume
    // - remote-containers.openRepositoryFromRemoteHub
    // - remote-containers.openRepositoryInUniqueVolume
    // - remote-containers.openRepositoryInVolume
    // - remote-containers.openWorkspace
    // - remote-containers.provideFeedback
    // - remote-containers.pruneVolumes
    // - remote-containers.rebuildAndReopenInContainer
    // - remote-containers.rebuildContainer
    // - remote-containers.removeContainer
    // - remote-containers.removeRecentFolder
    // - remote-containers.removeVolume
    // - remote-containers.reopenInContainer
    // - remote-containers.reopenInWSL
    // - remote-containers.reopenLocally
    // - remote-containers.reportIssue
    // - remote-containers.revealLogTerminal
    // - remote-containers.revealPostCreateTerminal
    // - remote-containers.settings
    // - remote-containers.showContainerLog
    // - remote-containers.showDetails
    // - remote-containers.showRecoveryContainerNotificationReset
    // - remote-containers.showReopenInContainerNotificationReset
    // - remote-containers.startAndOpenFolder
    // - remote-containers.startContainer
    // - remote-containers.stopContainer
    // - remote-containers.trySample
    // - remote-wsl.explorer.addDistro
    // - remote-wsl.explorer.openDistro
    // - remote-wsl.explorer.openFolder
    // - remote-wsl.explorer.refresh
    // - remote-wsl.explorer.removeFolder
    // - remote-wsl.explorer.setDefaultDistro
    // - remote-wsl.getHelp
    // - remote-wsl.getStarted
    // - remote-wsl.newWindow
    // - remote-wsl.newWindowForDistro
    // - remote-wsl.newWindowFromRecommendation
    // - remote-wsl.openFolder
    // - remote-wsl.provideFeedback
    // - remote-wsl.reopenInWSL
    // - remote-wsl.reopenInWindows
    // - remote-wsl.reportIssue
    // - remote-wsl.showLog
    // - remote.explorer.switch
    // - remote.tunnel.changeLocalPort
    // - remote.tunnel.closeCommandPalette
    // - remote.tunnel.copyAddressCommandPalette
    // - remote.tunnel.forwardCommandPalette
    // - remote.tunnel.forwardInline
    // - remote.tunnel.makePrivate
    // - remote.tunnel.makePublic
    // - remote.tunnel.open
    // - remote.tunnel.openCommandPalette
    // - remote.tunnel.openPreview
    // - removeRootFolder
    // - repl.action.copyAll
    // - replacePreviousChar
    // - resetGettingStartedProgress
    // - revealInExplorer
    // - rewrap.rewrapCommentAt
    // - rewrap.toggleAutoWrap
    // - scm.openInTerminal
    // - search.action.clearHistory
    // - search.action.clearSearchResults
    // - search.action.collapseSearchResults
    // - search.action.copyAll
    // - search.action.expandSearchResults
    // - search.action.focusSearchList
    // - search.action.openEditor
    // - search.action.openNewEditor
    // - search.action.openNewEditorFromView
    // - search.action.openNewEditorToSide
    // - search.action.refreshSearchResults
    // - search.action.revealInSideBar
    // - selectFirstSuggestion
    // - selectForCompare
    // - selectLastSuggestion
    // - setContext
    // - setSelection
    // - settings.filterByModified
    // - settings.filterByOnline
    // - settings.filterUntrusted
    // - settings.switchToJSON
    // - showEditorScreenReaderNotification
    // - simpleBrowser.show
    // - sshHosts.focus
    // - sshHosts.resetViewLocation
    // - tabnine-completion-imports
    // - tabnine-handle-imports
    // - tabulous.createNamedTerminal
    // - tabulous.createTerminal
    // - tabulous.reloadDefaultTerminals
    // - tabulous.renameTerminal
    // - tabulous.showTerminal1
    // - tabulous.showTerminal10
    // - tabulous.showTerminal2
    // - tabulous.showTerminal3
    // - tabulous.showTerminal4
    // - tabulous.showTerminal5
    // - tabulous.showTerminal6
    // - tabulous.showTerminal7
    // - tabulous.showTerminal8
    // - tabulous.showTerminal9
    // - targetsContainers.focus
    // - targetsContainers.resetViewLocation
    // - targetsWsl.focus
    // - targetsWsl.resetViewLocation
    // - terminal.focus
    // - terminal.removeView
    // - terminal.resetViewContainerLocation
    // - terminal.resetViewLocation
    // - terminal.toggleVisibility
    // - terminalTabs.createNamedTerminal
    // - terminalTabs.createTerminal
    // - terminalTabs.showTerminal1
    // - terminalTabs.showTerminal10
    // - terminalTabs.showTerminal2
    // - terminalTabs.showTerminal3
    // - terminalTabs.showTerminal4
    // - terminalTabs.showTerminal5
    // - terminalTabs.showTerminal6
    // - terminalTabs.showTerminal7
    // - terminalTabs.showTerminal8
    // - terminalTabs.showTerminal9
    // - test-explorer.cancel
    // - test-explorer.debug
    // - test-explorer.debug-test-at-cursor
    // - test-explorer.debug-this-test
    // - test-explorer.disable-autorun
    // - test-explorer.dont-sort
    // - test-explorer.enable-autorun
    // - test-explorer.expand
    // - test-explorer.focus
    // - test-explorer.pick-and-debug
    // - test-explorer.pick-and-run
    // - test-explorer.redebug
    // - test-explorer.reload
    // - test-explorer.reload-collection
    // - test-explorer.reloading
    // - test-explorer.removeView
    // - test-explorer.rerun
    // - test-explorer.reset
    // - test-explorer.resetViewLocation
    // - test-explorer.retire
    // - test-explorer.reveal
    // - test-explorer.run
    // - test-explorer.run-all
    // - test-explorer.run-file
    // - test-explorer.run-test-at-cursor
    // - test-explorer.run-this-file
    // - test-explorer.run-this-test
    // - test-explorer.show-error
    // - test-explorer.show-log
    // - test-explorer.show-source
    // - test-explorer.sort-by-label
    // - test-explorer.sort-by-label-with-suites-first
    // - test-explorer.sort-by-location
    // - test-explorer.sort-by-location-with-suites-first
    // - test-explorer.toggleVisibility
    // - testExplorerConverter.activate
    // - testing.cancelRun
    // - testing.clearTestResults
    // - testing.collapseAll
    // - testing.debugAll
    // - testing.debugAtCursor
    // - testing.debugCurrentFile
    // - testing.debugFailTests
    // - testing.debugLastRun
    // - testing.debugSelected
    // - testing.reRunFailTests
    // - testing.reRunLastRun
    // - testing.refreshTests
    // - testing.runAll
    // - testing.runAtCursor
    // - testing.runCurrentFile
    // - testing.runSelected
    // - testing.searchForTestExtension
    // - testing.showMostRecentOutput
    // - testing.sortByLocation
    // - testing.sortByName
    // - testing.toggleautoRun
    // - testing.viewAsList
    // - testing.viewAsTree
    // - timeline.focus
    // - timeline.removeView
    // - timeline.resetViewLocation
    // - timeline.toggleVisibility
    // - todo-tree-view.focus
    // - todo-tree-view.removeView
    // - todo-tree-view.resetViewLocation
    // - todo-tree-view.toggleVisibility
    // - todo-tree.addTag
    // - todo-tree.collapse
    // - todo-tree.excludeThisFile
    // - todo-tree.excludeThisFolder
    // - todo-tree.expand
    // - todo-tree.exportTree
    // - todo-tree.filter
    // - todo-tree.filterClear
    // - todo-tree.groupBySubTag
    // - todo-tree.groupByTag
    // - todo-tree.onStatusBarClicked
    // - todo-tree.openUrl
    // - todo-tree.refresh
    // - todo-tree.removeFilter
    // - todo-tree.removeTag
    // - todo-tree.resetAllFilters
    // - todo-tree.resetCache
    // - todo-tree.reveal
    // - todo-tree.scanCurrentFileOnly
    // - todo-tree.scanOpenFilesOnly
    // - todo-tree.scanWorkspaceAndOpenFiles
    // - todo-tree.scanWorkspaceOnly
    // - todo-tree.showFlatView
    // - todo-tree.showOnlyThisFolder
    // - todo-tree.showOnlyThisFolderAndSubfolders
    // - todo-tree.showTagsOnlyView
    // - todo-tree.showTreeView
    // - todo-tree.stopScan
    // - todo-tree.switchScope
    // - todo-tree.toggleBadges
    // - todo-tree.toggleCompactFolders
    // - todo-tree.toggleItemCounts
    // - todo-tree.ungroupBySubTag
    // - todo-tree.ungroupByTag
    // - toggle.diff.ignoreTrimWhitespace
    // - toggle.diff.renderSideBySide
    // - toggleEscapeSequenceLogging
    // - typescript.findAllFileReferences
    // - typescript.goToProjectConfig
    // - typescript.openTsServerLog
    // - typescript.reloadProjects
    // - typescript.restartTsServer
    // - typescript.selectTypeScriptVersion
    // - update.check
    // - update.checkForVSCodeUpdate
    // - update.checking
    // - update.downloadNow
    // - update.downloading
    // - update.install
    // - update.restart
    // - update.showCurrentReleaseNotes
    // - update.updating
    // - variables.collapse
    // - vscode-account.askForLogin
    // - vscode-account.login
    // - vscode-account.logout
    // - vscode-docker.compose.down
    // - vscode-docker.compose.restart
    // - vscode-docker.compose.up
    // - vscode-docker.compose.up.subset
    // - vscode-docker.configure
    // - vscode-docker.configureCompose
    // - vscode-docker.containers.attachShell
    // - vscode-docker.containers.browse
    // - vscode-docker.containers.composeGroup.down
    // - vscode-docker.containers.composeGroup.logs
    // - vscode-docker.containers.composeGroup.restart
    // - vscode-docker.containers.configureExplorer
    // - vscode-docker.containers.downloadFile
    // - vscode-docker.containers.inspect
    // - vscode-docker.containers.openFile
    // - vscode-docker.containers.prune
    // - vscode-docker.containers.refresh
    // - vscode-docker.containers.remove
    // - vscode-docker.containers.restart
    // - vscode-docker.containers.select
    // - vscode-docker.containers.start
    // - vscode-docker.containers.stop
    // - vscode-docker.containers.viewLogs
    // - vscode-docker.contexts.configureExplorer
    // - vscode-docker.contexts.create.aci
    // - vscode-docker.contexts.help
    // - vscode-docker.contexts.inspect
    // - vscode-docker.contexts.refresh
    // - vscode-docker.contexts.remove
    // - vscode-docker.contexts.use
    // - vscode-docker.debugging.initializeForDebugging
    // - vscode-docker.help
    // - vscode-docker.help.openStartPage
    // - vscode-docker.help.reportIssue
    // - vscode-docker.images.build
    // - vscode-docker.images.configureExplorer
    // - vscode-docker.images.copyFullTag
    // - vscode-docker.images.inspect
    // - vscode-docker.images.prune
    // - vscode-docker.images.pull
    // - vscode-docker.images.push
    // - vscode-docker.images.refresh
    // - vscode-docker.images.remove
    // - vscode-docker.images.run
    // - vscode-docker.images.runAzureCli
    // - vscode-docker.images.runInteractive
    // - vscode-docker.images.tag
    // - vscode-docker.installDocker
    // - vscode-docker.networks.configureExplorer
    // - vscode-docker.networks.create
    // - vscode-docker.networks.inspect
    // - vscode-docker.networks.prune
    // - vscode-docker.networks.refresh
    // - vscode-docker.networks.remove
    // - vscode-docker.pruneSystem
    // - vscode-docker.registries.azure.buildImage
    // - vscode-docker.registries.azure.createRegistry
    // - vscode-docker.registries.azure.deleteRegistry
    // - vscode-docker.registries.azure.deleteRepository
    // - vscode-docker.registries.azure.openInPortal
    // - vscode-docker.registries.azure.runFileAsTask
    // - vscode-docker.registries.azure.runTask
    // - vscode-docker.registries.azure.selectSubscriptions
    // - vscode-docker.registries.azure.untagImage
    // - vscode-docker.registries.azure.viewProperties
    // - vscode-docker.registries.azure.viewTaskLogs
    // - vscode-docker.registries.connectRegistry
    // - vscode-docker.registries.copyImageDigest
    // - vscode-docker.registries.deleteImage
    // - vscode-docker.registries.deployImageToAci
    // - vscode-docker.registries.deployImageToAzure
    // - vscode-docker.registries.disconnectRegistry
    // - vscode-docker.registries.dockerHub.openInBrowser
    // - vscode-docker.registries.help
    // - vscode-docker.registries.logInToDockerCli
    // - vscode-docker.registries.logOutOfDockerCli
    // - vscode-docker.registries.pullImage
    // - vscode-docker.registries.pullRepository
    // - vscode-docker.registries.reconnectRegistry
    // - vscode-docker.registries.refresh
    // - vscode-docker.views.dockerContexts.focus
    // - vscode-docker.views.dockerContexts.removeView
    // - vscode-docker.views.dockerContexts.resetViewLocation
    // - vscode-docker.views.dockerContexts.toggleVisibility
    // - vscode-docker.views.help.focus
    // - vscode-docker.views.help.removeView
    // - vscode-docker.views.help.resetViewLocation
    // - vscode-docker.views.help.toggleVisibility
    // - vscode-docker.volumes.configureExplorer
    // - vscode-docker.volumes.inspect
    // - vscode-docker.volumes.prune
    // - vscode-docker.volumes.refresh
    // - vscode-docker.volumes.remove
    // - vscode-icons.activateIcons
    // - vscode-icons.foldersAllDefaultIconPreset
    // - vscode-icons.hideExplorerArrowsPreset
    // - vscode-icons.hideFoldersPreset
    // - vscode-icons.jsPreset
    // - vscode-icons.jsonPreset
    // - vscode-icons.nestPreset
    // - vscode-icons.ngPreset
    // - vscode-icons.regenerateIcons
    // - vscode-icons.resetProjectDetectionDefaults
    // - vscode-icons.restoreIcons
    // - vscode-icons.tsPreset
    // - vsintellicode.completionItemSelected
    // - watch.collapse
    // - workSpaceCommandExecuter.execute
    // - workSpaceCommandExplorer.add
    // - workSpaceCommandExplorer.addFolder
    // - workSpaceCommandExplorer.delete
    // - workSpaceCommandExplorer.edit
    // - workSpaceCommandExplorer.focus
    // - workSpaceCommandExplorer.openFile
    // - workSpaceCommandExplorer.removeView
    // - workSpaceCommandExplorer.resetViewLocation
    // - workSpaceCommandExplorer.sync
    // - workSpaceCommandExplorer.toggleVisibility
    // - workbench.action.acceptSelectedQuickOpenItem
    // - workbench.action.addComment
    // - workbench.action.addRootFolder
    // - workbench.action.alternativeAcceptSelectedQuickOpenItem
    // - workbench.action.blur
    // - workbench.action.clearCommandHistory
    // - workbench.action.clearEditorHistory
    // - workbench.action.clearRecentFiles
    // - workbench.action.closeActivePinnedEditor
    // - workbench.action.closeEditorInAllGroups
    // - workbench.action.closeEditorsAndGroup
    // - workbench.action.closeEditorsInOtherGroups
    // - workbench.action.closeEditorsToTheLeft
    // - workbench.action.closeEditorsToTheRight
    // - workbench.action.closePanel
    // - workbench.action.closeSidebar
    // - workbench.action.compareEditor.focusOtherSide
    // - workbench.action.compareEditor.focusPrimarySide
    // - workbench.action.compareEditor.focusSecondarySide
    // - workbench.action.configureLanguageBasedSettings
    // - workbench.action.configureLocale
    // - workbench.action.configureRuntimeArguments
    // - workbench.action.debug.configure
    // - workbench.action.debug.focusProcess
    // - workbench.action.debug.restartFrame
    // - workbench.action.debug.reverseContinue
    // - workbench.action.debug.selectRepl
    // - workbench.action.debug.selectandstart
    // - workbench.action.debug.stepBack
    // - workbench.action.debug.terminateThread
    // - workbench.action.decreaseViewHeight
    // - workbench.action.decreaseViewSize
    // - workbench.action.decreaseViewWidth
    // - workbench.action.duplicateActiveEditorGroupDown
    // - workbench.action.duplicateActiveEditorGroupLeft
    // - workbench.action.duplicateActiveEditorGroupRight
    // - workbench.action.duplicateActiveEditorGroupUp
    // - workbench.action.duplicateWorkspaceInNewWindow
    // - workbench.action.editor.changeEOL
    // - workbench.action.editor.changeEncoding
    // - workbench.action.editorLayoutSingle
    // - workbench.action.editorLayoutThreeColumns
    // - workbench.action.editorLayoutThreeRows
    // - workbench.action.editorLayoutTwoByTwoGrid
    // - workbench.action.editorLayoutTwoColumns
    // - workbench.action.editorLayoutTwoColumnsBottom
    // - workbench.action.editorLayoutTwoRows
    // - workbench.action.editorLayoutTwoRowsRight
    // - workbench.action.evenEditorWidths
    // - workbench.action.extensionHostProfiler.stop
    // - workbench.action.files.openFileFolderInNewWindow
    // - workbench.action.files.openFileInNewWindow
    // - workbench.action.files.openFolderInNewWindow
    // - workbench.action.files.revert
    // - workbench.action.files.saveFiles
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusAboveGroupWithoutWrap
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusActivityBar
    // - workbench.action.focusBelowGroupWithoutWrap
    // - workbench.action.focusCommentsPanel
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusLeftGroupWithoutWrap
    // - workbench.action.focusPanel
    // - workbench.action.focusQuickOpen
    // - workbench.action.focusRightGroupWithoutWrap
    // - workbench.action.focusStatusBar
    // - workbench.action.generateColorTheme
    // - workbench.action.increaseViewHeight
    // - workbench.action.increaseViewSize
    // - workbench.action.increaseViewWidth
    // - workbench.action.inspectContextKeys
    // - workbench.action.inspectKeyMappings
    // - workbench.action.inspectKeyMappingsJSON
    // - workbench.action.installCommandLine
    // - workbench.action.joinAllGroups
    // - workbench.action.joinTwoGroups
    // - workbench.action.logStorage
    // - workbench.action.logWorkingCopies
    // - workbench.action.manageTrust
    // - workbench.action.manageTrustedDomain
    // - workbench.action.mergeAllWindowTabs
    // - workbench.action.minimizeOtherEditors
    // - workbench.action.moveEditorToAboveGroup
    // - workbench.action.moveEditorToBelowGroup
    // - workbench.action.moveEditorToLeftGroup
    // - workbench.action.moveEditorToRightGroup
    // - workbench.action.moveFocusedView
    // - workbench.action.moveView
    // - workbench.action.moveWindowTabToNewWindow
    // - workbench.action.navigateDown
    // - workbench.action.navigateEditorGroups
    // - workbench.action.navigateLast
    // - workbench.action.navigateLeft
    // - workbench.action.navigateRight
    // - workbench.action.navigateUp
    // - workbench.action.newGroupAbove
    // - workbench.action.newGroupBelow
    // - workbench.action.newGroupLeft
    // - workbench.action.newGroupRight
    // - workbench.action.newWindowTab
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openActiveLogOutputFile
    // - workbench.action.openDefaultKeybindingsFile
    // - workbench.action.openDocumentationUrl
    // - workbench.action.openEditorAtIndex
    // - workbench.action.openExtensionLogsFolder
    // - workbench.action.openFolderSettings
    // - workbench.action.openFolderSettingsFile
    // - workbench.action.openGlobalKeybindingsFile
    // - workbench.action.openIntroductoryVideosUrl
    // - workbench.action.openIssueReporter
    // - workbench.action.openLicenseUrl
    // - workbench.action.openLogFile
    // - workbench.action.openLogsFolder
    // - workbench.action.openNewsletterSignupUrl
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousEditorFromHistory
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.openPrivacyStatementUrl
    // - workbench.action.openProcessExplorer
    // - workbench.action.openRawDefaultSettings
    // - workbench.action.openRemoteSettings
    // - workbench.action.openRequestFeatureUrl
    // - workbench.action.openSettings2
    // - workbench.action.openSettingsJson
    // - workbench.action.openSnippets
    // - workbench.action.openTipsAndTricksUrl
    // - workbench.action.openTwitterUrl
    // - workbench.action.openView
    // - workbench.action.openWorkspace
    // - workbench.action.openWorkspaceConfigFile
    // - workbench.action.openWorkspaceInNewWindow
    // - workbench.action.openWorkspaceSettings
    // - workbench.action.openWorkspaceSettingsFile
    // - workbench.action.positionPanelBottom
    // - workbench.action.positionPanelLeft
    // - workbench.action.positionPanelRight
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.problems.focus
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenNavigateNextInTerminalPicker
    // - workbench.action.quickOpenNavigatePrevious
    // - workbench.action.quickOpenNavigatePreviousInTerminalPicker
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenRecent
    // - workbench.action.quickOpenTerm
    // - workbench.action.quickPickManyToggle
    // - workbench.action.quickSwitchWindow
    // - workbench.action.reloadWindowWithExtensionsDisabled
    // - workbench.action.remote.showMenu
    // - workbench.action.removeRootFolder
    // - workbench.action.reopenWithEditor
    // - workbench.action.reportPerformanceIssueUsingReporter
    // - workbench.action.resetFocusedViewLocation
    // - workbench.action.resetViewLocations
    // - workbench.action.restartExtensionHost
    // - workbench.action.revertAndCloseActiveEditor
    // - workbench.action.saveWorkspaceAs
    // - workbench.action.selectIconTheme
    // - workbench.action.selectProductIconTheme
    // - workbench.action.setLogLevel
    // - workbench.action.showAboutDialog
    // - workbench.action.showAllEditorsByMostRecentlyUsed
    // - workbench.action.showEditorsInActiveGroup
    // - workbench.action.showEditorsInGroup
    // - workbench.action.showEmmetCommands
    // - workbench.action.showGettingStarted
    // - workbench.action.showInteractivePlayground
    // - workbench.action.showInterfaceOverview
    // - workbench.action.showLogs
    // - workbench.action.showNextWindowTab
    // - workbench.action.showPreviousWindowTab
    // - workbench.action.showRuntimeExtensions
    // - workbench.action.showWelcomePage
    // - workbench.action.showWindowLog
    // - workbench.action.splitEditorDown
    // - workbench.action.splitEditorLeft
    // - workbench.action.splitEditorRight
    // - workbench.action.splitEditorUp
    // - workbench.action.tasks.configureDefaultBuildTask
    // - workbench.action.tasks.configureDefaultTestTask
    // - workbench.action.tasks.manageAutomaticRunning
    // - workbench.action.tasks.openUserTasks
    // - workbench.action.tasks.openWorkspaceFileTasks
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.tasks.toggleProblems
    // - workbench.action.terminal.attachToSession
    // - workbench.action.terminal.changeIcon
    // - workbench.action.terminal.changeIconInstance
    // - workbench.action.terminal.createProfileButton
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.newWithProfile
    // - workbench.action.terminal.openSettings
    // - workbench.action.terminal.relaunch
    // - workbench.action.terminal.rename
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.selectDefaultShell
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.showEnvironmentInformation
    // - workbench.action.terminal.showTabs
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.switchTerminal
    // - workbench.action.toggleActivityBarVisibility
    // - workbench.action.toggleAutoSave
    // - workbench.action.toggleCenteredLayout
    // - workbench.action.toggleConfirmBeforeClose
    // - workbench.action.toggleEditorType
    // - workbench.action.toggleEditorVisibility
    // - workbench.action.toggleEditorWidths
    // - workbench.action.toggleKeepEditors
    // - workbench.action.toggleKeybindingsLog
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.toggleMultiCursorModifier
    // - workbench.action.toggleScreencastMode
    // - workbench.action.toggleSearchOnType
    // - workbench.action.toggleSharedProcess
    // - workbench.action.toggleSidebarPosition
    // - workbench.action.toggleStatusbarVisibility
    // - workbench.action.toggleWindowTabsBar
    // - workbench.action.uninstallCommandLine
    // - workbench.action.url.openUrl
    // - workbench.action.webview.openDeveloperTools
    // - workbench.action.webview.reloadWebviewAction
    // - workbench.actions.sync.editMachineName
    // - workbench.actions.sync.replaceCurrent
    // - workbench.actions.sync.resolveResource
    // - workbench.actions.sync.turnOffSyncOnMachine
    // - workbench.actions.syncData.reset
    // - workbench.actions.treeView.CppReferencesView.collapseAll
    // - workbench.actions.treeView.CppReferencesView.refresh
    // - workbench.actions.treeView.arduinoExampleExplorer.collapseAll
    // - workbench.actions.treeView.arduinoExampleExplorer.refresh
    // - workbench.actions.treeView.aws.cdk.explorer.collapseAll
    // - workbench.actions.treeView.aws.cdk.explorer.refresh
    // - workbench.actions.treeView.aws.explorer.collapseAll
    // - workbench.actions.treeView.aws.explorer.refresh
    // - workbench.actions.treeView.bazelWorkspace.collapseAll
    // - workbench.actions.treeView.bazelWorkspace.refresh
    // - workbench.actions.treeView.cSpellRegExpView.collapseAll
    // - workbench.actions.treeView.cSpellRegExpView.refresh
    // - workbench.actions.treeView.commitViewProvider.collapseAll
    // - workbench.actions.treeView.commitViewProvider.refresh
    // - workbench.actions.treeView.compareCommitViewProvider.collapseAll
    // - workbench.actions.treeView.compareCommitViewProvider.refresh
    // - workbench.actions.treeView.currentBranchInfo.collapseAll
    // - workbench.actions.treeView.currentBranchInfo.refresh
    // - workbench.actions.treeView.detailsContainers.collapseAll
    // - workbench.actions.treeView.detailsContainers.refresh
    // - workbench.actions.treeView.devVolumes.collapseAll
    // - workbench.actions.treeView.devVolumes.refresh
    // - workbench.actions.treeView.dockerContainers.collapseAll
    // - workbench.actions.treeView.dockerContainers.refresh
    // - workbench.actions.treeView.dockerImages.collapseAll
    // - workbench.actions.treeView.dockerImages.refresh
    // - workbench.actions.treeView.dockerNetworks.collapseAll
    // - workbench.actions.treeView.dockerNetworks.refresh
    // - workbench.actions.treeView.dockerRegistries.collapseAll
    // - workbench.actions.treeView.dockerRegistries.refresh
    // - workbench.actions.treeView.dockerVolumes.collapseAll
    // - workbench.actions.treeView.dockerVolumes.refresh
    // - workbench.actions.treeView.gitTreeCompare.collapseAll
    // - workbench.actions.treeView.gitTreeCompare.refresh
    // - workbench.actions.treeView.gitlens.views.branches.collapseAll
    // - workbench.actions.treeView.gitlens.views.branches.refresh
    // - workbench.actions.treeView.gitlens.views.commits.collapseAll
    // - workbench.actions.treeView.gitlens.views.commits.refresh
    // - workbench.actions.treeView.gitlens.views.contributors.collapseAll
    // - workbench.actions.treeView.gitlens.views.contributors.refresh
    // - workbench.actions.treeView.gitlens.views.fileHistory.collapseAll
    // - workbench.actions.treeView.gitlens.views.fileHistory.refresh
    // - workbench.actions.treeView.gitlens.views.lineHistory.collapseAll
    // - workbench.actions.treeView.gitlens.views.lineHistory.refresh
    // - workbench.actions.treeView.gitlens.views.remotes.collapseAll
    // - workbench.actions.treeView.gitlens.views.remotes.refresh
    // - workbench.actions.treeView.gitlens.views.repositories.collapseAll
    // - workbench.actions.treeView.gitlens.views.repositories.refresh
    // - workbench.actions.treeView.gitlens.views.searchAndCompare.collapseAll
    // - workbench.actions.treeView.gitlens.views.searchAndCompare.refresh
    // - workbench.actions.treeView.gitlens.views.stashes.collapseAll
    // - workbench.actions.treeView.gitlens.views.stashes.refresh
    // - workbench.actions.treeView.gitlens.views.tags.collapseAll
    // - workbench.actions.treeView.gitlens.views.tags.refresh
    // - workbench.actions.treeView.gitlens.views.updates.collapseAll
    // - workbench.actions.treeView.gitlens.views.updates.refresh
    // - workbench.actions.treeView.gitlens.views.welcome.collapseAll
    // - workbench.actions.treeView.gitlens.views.welcome.refresh
    // - workbench.actions.treeView.globalCommandExplorer.collapseAll
    // - workbench.actions.treeView.globalCommandExplorer.refresh
    // - workbench.actions.treeView.issuesAndMrs.collapseAll
    // - workbench.actions.treeView.issuesAndMrs.refresh
    // - workbench.actions.treeView.jsBrowserBreakpoints.collapseAll
    // - workbench.actions.treeView.jsBrowserBreakpoints.refresh
    // - workbench.actions.treeView.latex-commands.collapseAll
    // - workbench.actions.treeView.latex-commands.refresh
    // - workbench.actions.treeView.latex-structure.collapseAll
    // - workbench.actions.treeView.latex-structure.refresh
    // - workbench.actions.treeView.liveshare.contacts.collapseAll
    // - workbench.actions.treeView.liveshare.contacts.refresh
    // - workbench.actions.treeView.liveshare.help.collapseAll
    // - workbench.actions.treeView.liveshare.help.refresh
    // - workbench.actions.treeView.liveshare.plannedSessions.collapseAll
    // - workbench.actions.treeView.liveshare.plannedSessions.refresh
    // - workbench.actions.treeView.liveshare.session.collapseAll
    // - workbench.actions.treeView.liveshare.session.explorer.collapseAll
    // - workbench.actions.treeView.liveshare.session.explorer.refresh
    // - workbench.actions.treeView.liveshare.session.refresh
    // - workbench.actions.treeView.npm.collapseAll
    // - workbench.actions.treeView.npm.refresh
    // - workbench.actions.treeView.projectManagerHelpAndFeedback.collapseAll
    // - workbench.actions.treeView.projectManagerHelpAndFeedback.refresh
    // - workbench.actions.treeView.projectsExplorerAny.collapseAll
    // - workbench.actions.treeView.projectsExplorerAny.refresh
    // - workbench.actions.treeView.projectsExplorerFavorites.collapseAll
    // - workbench.actions.treeView.projectsExplorerFavorites.refresh
    // - workbench.actions.treeView.projectsExplorerGit.collapseAll
    // - workbench.actions.treeView.projectsExplorerGit.refresh
    // - workbench.actions.treeView.projectsExplorerMercurial.collapseAll
    // - workbench.actions.treeView.projectsExplorerMercurial.refresh
    // - workbench.actions.treeView.projectsExplorerSVN.collapseAll
    // - workbench.actions.treeView.projectsExplorerSVN.refresh
    // - workbench.actions.treeView.projectsExplorerVSCode.collapseAll
    // - workbench.actions.treeView.projectsExplorerVSCode.refresh
    // - workbench.actions.treeView.python_tests.collapseAll
    // - workbench.actions.treeView.python_tests.refresh
    // - workbench.actions.treeView.references-view.tree.collapseAll
    // - workbench.actions.treeView.references-view.tree.refresh
    // - workbench.actions.treeView.repl.filter
    // - workbench.actions.treeView.sshHosts.collapseAll
    // - workbench.actions.treeView.sshHosts.refresh
    // - workbench.actions.treeView.targetsContainers.collapseAll
    // - workbench.actions.treeView.targetsContainers.refresh
    // - workbench.actions.treeView.targetsWsl.collapseAll
    // - workbench.actions.treeView.targetsWsl.refresh
    // - workbench.actions.treeView.test-explorer.collapseAll
    // - workbench.actions.treeView.test-explorer.refresh
    // - workbench.actions.treeView.testExplorer.filter
    // - workbench.actions.treeView.todo-tree-view.collapseAll
    // - workbench.actions.treeView.todo-tree-view.refresh
    // - workbench.actions.treeView.vscode-docker.views.dockerContexts.collapseAll
    // - workbench.actions.treeView.vscode-docker.views.dockerContexts.refresh
    // - workbench.actions.treeView.vscode-docker.views.help.collapseAll
    // - workbench.actions.treeView.vscode-docker.views.help.refresh
    // - workbench.actions.treeView.workSpaceCommandExplorer.collapseAll
    // - workbench.actions.treeView.workSpaceCommandExplorer.refresh
    // - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
    // - workbench.actions.treeView.workbench.panel.markers.view.filter
    // - workbench.actions.treeView.workbench.views.sync.localActivity.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.localActivity.refresh
    // - workbench.actions.treeView.workbench.views.sync.machines.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.machines.refresh
    // - workbench.actions.treeView.workbench.views.sync.merges.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.merges.refresh
    // - workbench.actions.treeView.workbench.views.sync.remoteActivity.collapseAll
    // - workbench.actions.treeView.workbench.views.sync.remoteActivity.refresh
    // - workbench.actions.treeView.zipExplorer.collapseAll
    // - workbench.actions.treeView.zipExplorer.refresh
    // - workbench.actions.view.toggleProblems
    // - workbench.debug.action.copyAll
    // - workbench.debug.action.focusBreakpointsView
    // - workbench.debug.action.focusCallStackView
    // - workbench.debug.action.focusRepl
    // - workbench.debug.action.focusVariablesView
    // - workbench.debug.action.focusWatchView
    // - workbench.debug.breakPointsView.removeView
    // - workbench.debug.breakPointsView.resetViewLocation
    // - workbench.debug.breakPointsView.toggleVisibility
    // - workbench.debug.callStackView.removeView
    // - workbench.debug.callStackView.resetViewLocation
    // - workbench.debug.callStackView.toggleVisibility
    // - workbench.debug.loadedScriptsView.focus
    // - workbench.debug.loadedScriptsView.resetViewLocation
    // - workbench.debug.panel.action.clearReplAction
    // - workbench.debug.variablesView.removeView
    // - workbench.debug.variablesView.resetViewLocation
    // - workbench.debug.variablesView.toggleVisibility
    // - workbench.debug.viewlet.action.addFunctionBreakpointAction
    // - workbench.debug.viewlet.action.addWatchExpression
    // - workbench.debug.viewlet.action.copyValue
    // - workbench.debug.viewlet.action.disableAllBreakpoints
    // - workbench.debug.viewlet.action.enableAllBreakpoints
    // - workbench.debug.viewlet.action.reapplyBreakpointsAction
    // - workbench.debug.viewlet.action.removeAllBreakpoints
    // - workbench.debug.viewlet.action.removeAllWatchExpressions
    // - workbench.debug.viewlet.action.removeBreakpoint
    // - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
    // - workbench.debug.watchExpressionsView.removeView
    // - workbench.debug.watchExpressionsView.resetViewLocation
    // - workbench.debug.watchExpressionsView.toggleVisibility
    // - workbench.debug.welcome.focus
    // - workbench.debug.welcome.resetViewLocation
    // - workbench.explorer.fileView.focus
    // - workbench.explorer.fileView.removeView
    // - workbench.explorer.fileView.resetViewLocation
    // - workbench.explorer.fileView.toggleVisibility
    // - workbench.explorer.openEditorsView.removeView
    // - workbench.explorer.openEditorsView.resetViewLocation
    // - workbench.explorer.openEditorsView.toggleVisibility
    // - workbench.extensions.action.addExtensionToWorkspaceRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderRecommendations
    // - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceRecommendations
    // - workbench.extensions.action.checkForUpdates
    // - workbench.extensions.action.clearExtensionsSearchResults
    // - workbench.extensions.action.configure
    // - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
    // - workbench.extensions.action.configureWorkspaceRecommendedExtensions
    // - workbench.extensions.action.copyExtension
    // - workbench.extensions.action.copyExtensionId
    // - workbench.extensions.action.debugExtensionHost
    // - workbench.extensions.action.disableAll
    // - workbench.extensions.action.disableAllWorkspace
    // - workbench.extensions.action.disableAutoUpdate
    // - workbench.extensions.action.enableAll
    // - workbench.extensions.action.enableAllWorkspace
    // - workbench.extensions.action.enableAutoUpdate
    // - workbench.extensions.action.extensionHostProfile
    // - workbench.extensions.action.ignoreRecommendation
    // - workbench.extensions.action.install.specificVersion
    // - workbench.extensions.action.installExtensions
    // - workbench.extensions.action.installVSIX
    // - workbench.extensions.action.installWorkspaceRecommendedExtensions
    // - workbench.extensions.action.listBuiltInExtensions
    // - workbench.extensions.action.listOutdatedExtensions
    // - workbench.extensions.action.listTrustRequiredExtensions
    // - workbench.extensions.action.manageAuthorizedExtensionURIs
    // - workbench.extensions.action.openExtensionsFolder
    // - workbench.extensions.action.recentlyPublishedExtensions
    // - workbench.extensions.action.refreshExtension
    // - workbench.extensions.action.reinstall
    // - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
    // - workbench.extensions.action.saveExtensionHostProfile
    // - workbench.extensions.action.showAzureExtensions
    // - workbench.extensions.action.showDisabledExtensions
    // - workbench.extensions.action.showEnabledExtensions
    // - workbench.extensions.action.showExtensionsForLanguage
    // - workbench.extensions.action.showExtensionsWithIds
    // - workbench.extensions.action.showInstalledExtensions
    // - workbench.extensions.action.showLanguageExtensions
    // - workbench.extensions.action.showPopularExtensions
    // - workbench.extensions.action.showRecommendedExtensions
    // - workbench.extensions.action.stopExtensionHostProfile
    // - workbench.extensions.action.toggleIgnoreExtension
    // - workbench.extensions.action.undoIgnoredRecommendation
    // - workbench.extensions.action.updateAllExtensions
    // - workbench.extensions.command.installFromVSIX
    // - workbench.extensions.installMissingDependencies
    // - workbench.files.action.acceptLocalChanges
    // - workbench.files.action.collapseExplorerFolders
    // - workbench.files.action.compareFileWith
    // - workbench.files.action.createFileFromExplorer
    // - workbench.files.action.createFolderFromExplorer
    // - workbench.files.action.focusFilesExplorer
    // - workbench.files.action.refreshFilesExplorer
    // - workbench.files.action.revertLocalChanges
    // - workbench.files.action.saveAllInGroup
    // - workbench.files.action.showActiveFileInExplorer
    // - workbench.getCodeExchangeProxyEndpoints
    // - workbench.output.action.clearOutput
    // - workbench.output.action.switchBetweenOutputs
    // - workbench.output.action.toggleAutoScroll
    // - workbench.panel.markers.resetViewContainerLocation
    // - workbench.panel.markers.view.focus
    // - workbench.panel.markers.view.removeView
    // - workbench.panel.markers.view.resetViewLocation
    // - workbench.panel.markers.view.toggleVisibility
    // - workbench.panel.output.focus
    // - workbench.panel.output.removeView
    // - workbench.panel.output.resetViewContainerLocation
    // - workbench.panel.output.resetViewLocation
    // - workbench.panel.output.toggleVisibility
    // - workbench.panel.repl.resetViewContainerLocation
    // - workbench.panel.repl.view.focus
    // - workbench.panel.repl.view.removeView
    // - workbench.panel.repl.view.resetViewLocation
    // - workbench.panel.repl.view.toggleVisibility
    // - workbench.scm.action.collapseAllRepositories
    // - workbench.scm.action.expandAllRepositories
    // - workbench.scm.action.setListViewMode
    // - workbench.scm.action.setSortKey.name
    // - workbench.scm.action.setSortKey.path
    // - workbench.scm.action.setSortKey.status
    // - workbench.scm.action.setTreeViewMode
    // - workbench.scm.focus
    // - workbench.scm.removeView
    // - workbench.scm.repositories.focus
    // - workbench.scm.repositories.removeView
    // - workbench.scm.repositories.resetViewLocation
    // - workbench.scm.repositories.toggleVisibility
    // - workbench.scm.resetViewLocation
    // - workbench.scm.toggleVisibility
    // - workbench.trust.manage
    // - workbench.userData.actions.openSyncBackupsFolder
    // - workbench.userData.actions.signin
    // - workbench.userData.actions.turningOn
    // - workbench.userDataSync.actions.configure
    // - workbench.userDataSync.actions.manage
    // - workbench.userDataSync.actions.resolveKeybindingsConflicts
    // - workbench.userDataSync.actions.resolveSettingsConflicts
    // - workbench.userDataSync.actions.resolveSnippetsConflicts
    // - workbench.userDataSync.actions.settings
    // - workbench.userDataSync.actions.showLog
    // - workbench.userDataSync.actions.showSyncedData
    // - workbench.userDataSync.actions.syncNow
    // - workbench.userDataSync.actions.turnOff
    // - workbench.userDataSync.actions.turnOn
    // - workbench.view.debug.resetViewContainerLocation
    // - workbench.view.explorer.resetViewContainerLocation
    // - workbench.view.extension.aws-explorer
    // - workbench.view.extension.aws-explorer.resetViewContainerLocation
    // - workbench.view.extension.commandList
    // - workbench.view.extension.commandList.resetViewContainerLocation
    // - workbench.view.extension.cspell-explorer
    // - workbench.view.extension.cspell-explorer.resetViewContainerLocation
    // - workbench.view.extension.dockerView
    // - workbench.view.extension.dockerView.resetViewContainerLocation
    // - workbench.view.extension.gitlab-workflow
    // - workbench.view.extension.gitlab-workflow.resetViewContainerLocation
    // - workbench.view.extension.gitlens
    // - workbench.view.extension.gitlens.resetViewContainerLocation
    // - workbench.view.extension.jupyter-variables
    // - workbench.view.extension.jupyter-variables.resetViewContainerLocation
    // - workbench.view.extension.latex.resetViewContainerLocation
    // - workbench.view.extension.liveshare
    // - workbench.view.extension.liveshare.resetViewContainerLocation
    // - workbench.view.extension.project-manager
    // - workbench.view.extension.project-manager.resetViewContainerLocation
    // - workbench.view.extension.references-view
    // - workbench.view.extension.references-view.resetViewContainerLocation
    // - workbench.view.extension.test
    // - workbench.view.extension.test.resetViewContainerLocation
    // - workbench.view.extension.todo-tree-container
    // - workbench.view.extension.todo-tree-container.resetViewContainerLocation
    // - workbench.view.extensions.resetViewContainerLocation
    // - workbench.view.remote
    // - workbench.view.remote.resetViewContainerLocation
    // - workbench.view.scm.resetViewContainerLocation
    // - workbench.view.search.focus
    // - workbench.view.search.removeView
    // - workbench.view.search.resetViewContainerLocation
    // - workbench.view.search.resetViewLocation
    // - workbench.view.search.toggleVisibility
    // - workbench.view.sync
    // - workbench.view.sync.resetViewContainerLocation
    // - workbench.view.testing.focus
    // - workbench.view.testing.resetViewLocation
    // - workbench.views.extensions.builtinFeatureExtensions.focus
    // - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
    // - workbench.views.extensions.builtinThemeExtensions.focus
    // - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
    // - workbench.views.extensions.disabled.focus
    // - workbench.views.extensions.disabled.resetViewLocation
    // - workbench.views.extensions.enabled.focus
    // - workbench.views.extensions.enabled.resetViewLocation
    // - workbench.views.extensions.installed.empty.focus
    // - workbench.views.extensions.installed.empty.resetViewLocation
    // - workbench.views.extensions.installed.focus
    // - workbench.views.extensions.installed.resetViewLocation
    // - workbench.views.extensions.marketplace.focus
    // - workbench.views.extensions.marketplace.removeView
    // - workbench.views.extensions.marketplace.resetViewLocation
    // - workbench.views.extensions.marketplace.toggleVisibility
    // - workbench.views.extensions.otherRecommendations.focus
    // - workbench.views.extensions.otherRecommendations.resetViewLocation
    // - workbench.views.extensions.popular.focus
    // - workbench.views.extensions.popular.resetViewLocation
    // - workbench.views.extensions.searchBuiltin.focus
    // - workbench.views.extensions.searchBuiltin.resetViewLocation
    // - workbench.views.extensions.searchDisabled.focus
    // - workbench.views.extensions.searchDisabled.resetViewLocation
    // - workbench.views.extensions.searchEnabled.focus
    // - workbench.views.extensions.searchEnabled.resetViewLocation
    // - workbench.views.extensions.searchInstalled.focus
    // - workbench.views.extensions.searchInstalled.resetViewLocation
    // - workbench.views.extensions.searchOutdated.focus
    // - workbench.views.extensions.searchOutdated.resetViewLocation
    // - workbench.views.extensions.searchTrustRequired.focus
    // - workbench.views.extensions.searchTrustRequired.resetViewLocation
    // - workbench.views.extensions.trustRequiredOnDemandExtensions.focus
    // - workbench.views.extensions.trustRequiredOnDemandExtensions.resetViewLocation
    // - workbench.views.extensions.trustRequiredOnStartExtensions.focus
    // - workbench.views.extensions.trustRequiredOnStartExtensions.resetViewLocation
    // - workbench.views.extensions.workspaceRecommendations.focus
    // - workbench.views.extensions.workspaceRecommendations.resetViewLocation
    // - workbench.views.service.sidebar.39b9a738-1bdc-4dae-b7eb-5ef5f6b69a2b.resetViewContainerLocation
    // - workbench.views.sync.localActivity.focus
    // - workbench.views.sync.localActivity.resetViewLocation
    // - workbench.views.sync.machines.focus
    // - workbench.views.sync.machines.resetViewLocation
    // - workbench.views.sync.merges.focus
    // - workbench.views.sync.merges.resetViewLocation
    // - workbench.views.sync.remoteActivity.focus
    // - workbench.views.sync.remoteActivity.resetViewLocation
    // - zipExplorer.focus
    // - zipExplorer.removeView
    // - zipExplorer.resetViewLocation
    // - zipExplorer.toggleVisibility
    // - zipexplorer.clear
    // - zipexplorer.exploreZipFile
    // - zipexplorer.extractElement
    // - zipexplorer.extractFiles
    // - zipexplorer.extractHere